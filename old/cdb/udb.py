# $Id$

#
# Since PyDO is a non-standard python package, we have to find it.  Here
# are some locations to search
#
import sys
import os.path
pydo_path = ('/tstaff/projects/udb/lib/python',
             os.path.expanduser('~/lib/python'),
             os.path.expanduser('~/python/lib'),
             os.path.expanduser('~/lib')
             )
map(sys.path.append, pydo_path)
import PyDO

def getConnection():
    dbi = Equipment.getDBI()
    return dbi.getConnection()

def rollback():
    Equipment.rollback()

def commit():
    Equipment.commit()

# From here down is:
# automatically generated by pgenscript.py
# but one change was made -- PyDO doesn't recognize 'macaddr' type, so changed
# it to text.

#PyDO.DBIInitAlias('udb', 'pydo:postgresql:db.cs.brown.edu:udb:twh:changeme')
PyDO.DBIInitAlias('udb', 'pydo:postgresql:localhost:udb:twh:changeme')

class Status(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'status'
    fields = (
        ('status', 'text'),
        ('nid', 'int4'),
    )
    unique = [('status', 'nid')]

    def getStatusList(self):
        return StatusList.getUnique(status = self['status'])

    def setStatusList(self, item):
        if item == None:
            self['status'] = None
        else:
            self['status'] = item['status']

    def getNetwork(self):
        return Network.getUnique(nid = self['nid'])

    def setNetwork(self, item):
        if item == None:
            self['nid'] = None
        else:
            self['nid'] = item['nid']

class Users(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'users'
    fields = (
        ('id', 'int4'),
        ('users', 'text'),
    )
    unique = [('id', 'users')]

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Netgroups(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'netgroups'
    fields = (
        ('netgroup', 'text'),
        ('nid', 'int4'),
    )
    unique = [('netgroup', 'nid')]

    def getNetwork(self):
        return Network.getUnique(nid = self['nid'])

    def setNetwork(self, item):
        if item == None:
            self['nid'] = None
        else:
            self['nid'] = item['nid']

class OsList(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'os_list'
    fields = (
        ('os', 'text'),
    )
    unique = [('os',)]

    def getJsPath(self):
        return JsPaths.getUnique(os = self['os'])

    def setJsPath(self, item):
        if item == None:
            self['os'] = None
        else:
            self['os'] = item['os']

    def getOsTypes(self):
        return OsType.getSome(os = self['os'])

    def addOsType(self, item):
        item.setOsList(self)

    def removeOsType(self, item):
        item.setOsList(None)

class Fai(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'fai'
    fields = (
        ('config', 'text'),
        ('nid', 'int4'),
    )
    unique = [('nid',)]

    def getNetwork(self):
        return Network.getUnique(nid = self['nid'])

    def setNetwork(self, item):
        if item == None:
            self['nid'] = None
        else:
            self['nid'] = item['nid']

class Aliases(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'aliases'
    fields = (
        ('alias', 'text'),
        ('nid', 'int4'),
    )
    unique = [('alias',)]

    def getNetwork(self):
        return Network.getUnique(nid = self['nid'])

    def setNetwork(self, item):
        if item == None:
            self['nid'] = None
        else:
            self['nid'] = item['nid']

class Purchase(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'purchase'
    fields = (
        ('comment', 'text'),
        ('date', 'date'),
        ('price', 'numeric'),
        ('po_num', 'text'),
        ('id', 'int4'),
    )
    unique = [('id',)]

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Account(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'account'
    fields = (
        ('acct', 'text'),
        ('percent', 'int4'),
        ('id', 'int4'),
    )
    unique = [('acct', 'id')]

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Installation(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'installation'
    fields = (
        ('comment', 'text'),
        ('date', 'date'),
        ('id', 'int4'),
    )
    unique = [('id',)]

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Network(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'network'
    fields = (
        ('comment', 'text'),
        ('mxhost', 'text'),
        ('ethernet', 'text'),
        ('bcast', 'inet'),
        ('hostname', 'text'),
        ('ipaddr', 'inet'),
        ('id', 'int4'),
        ('nid', 'int4'),
    )
    unique = [('nid',), ('ipaddr',), ('hostname',), ('ethernet', 'bcast')]

    sequenced = {
        'nid': 'network_nid_seq',
    }
    def getStatuses(self):
        return Status.getSome(nid = self['nid'])

    def addStatus(self, item):
        item.setNetwork(self)

    def removeStatus(self, item):
        item.setNetwork(None)

    def getNetgroups(self):
        return Netgroups.getSome(nid = self['nid'])

    def addNetgroup(self, item):
        item.setNetwork(self)

    def removeNetgroup(self, item):
        item.setNetwork(None)

    def getFai(self):
        return Fai.getUnique(nid = self['nid'])

    def setFai(self, item):
        if item == None:
            self['nid'] = None
        else:
            self['nid'] = item['nid']

    def getAliases(self):
        return Aliases.getSome(nid = self['nid'])

    def addAliase(self, item):
        item.setNetwork(self)

    def removeAliase(self, item):
        item.setNetwork(None)

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Dispose(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'dispose'
    fields = (
        ('comment', 'text'),
        ('sold_date', 'date'),
        ('price', 'numeric'),
        ('id', 'int4'),
        ('surplus_date', 'date'),
    )
    unique = [('id',)]

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Location(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'location'
    fields = (
        ('building', 'text'),
        ('lid', 'text'),
        ('room', 'text'),
        ('descr', 'text'),
        ('floor', 'text'),
    )
    unique = [('lid',), ('building', 'room', 'floor')]

    def getEquipments(self):
        return Equipment.getSome(lid = self['lid'])

    def addEquipment(self, item):
        item.setLocation(self)

    def removeEquipment(self, item):
        item.setLocation(None)

class Equipment(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'equipment'
    fields = (
        ('comment', 'text'),
        ('inventory_num', 'text'),
        ('lid', 'text'),
        ('descr', 'text'),
        ('usage', 'text'),
        ('active', 'bool'),
        ('id', 'int4'),
        ('owner', 'text'),
        ('serial_num', 'text'),
    )
    unique = [('id',), ('serial_num',), ('inventory_num',)]

    sequenced = {
        'id': 'equipment_id_seq',
    }
    def getUsers(self):
        return Users.getSome(id = self['id'])

    def addUser(self, item):
        item.setEquipment(self)

    def removeUser(self, item):
        item.setEquipment(None)

    def getPurchase(self):
        return Purchase.getUnique(id = self['id'])

    def setPurchase(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

    def getAccounts(self):
        return Account.getSome(id = self['id'])

    def addAccount(self, item):
        item.setEquipment(self)

    def removeAccount(self, item):
        item.setEquipment(None)

    def getInstallation(self):
        return Installation.getUnique(id = self['id'])

    def setInstallation(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

    def getNetworks(self):
        return Network.getSome(id = self['id'])

    def addNetwork(self, item):
        item.setEquipment(self)

    def removeNetwork(self, item):
        item.setEquipment(None)

    def getDispose(self):
        return Dispose.getUnique(id = self['id'])

    def setDispose(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

    def getLocation(self):
        return Location.getUnique(lid = self['lid'])

    def setLocation(self, item):
        if item == None:
            self['lid'] = None
        else:
            self['lid'] = item['lid']

    def getUsage(self):
        return Usage.getUnique(usage = self['usage'])

    def setUsage(self, item):
        if item == None:
            self['usage'] = None
        else:
            self['usage'] = item['usage']

    def getComponentOfs(self):
        return ComponentOf.getSome(parent = self['id'])

    def addComponentOf(self, item):
        item.setEquipment(self)

    def removeComponentOf(self, item):
        item.setEquipment(None)

    def getComponentOf(self):
        return ComponentOf.getUnique(id = self['id'])

    def setComponentOf(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

    def getOsTypes(self):
        return OsType.getSome(id = self['id'])

    def addOsType(self, item):
        item.setEquipment(self)

    def removeOsType(self, item):
        item.setEquipment(None)

    def getConfig(self):
        return Config.getUnique(id = self['id'])

    def setConfig(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

    def getArchitecture(self):
        return Architecture.getUnique(id = self['id'])

    def setArchitecture(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class ArchList(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'arch_list'
    fields = (
        ('arch', 'text'),
    )
    unique = [('arch',)]

    def getArchitectures(self):
        return Architecture.getSome(arch = self['arch'])

    def addArchitecture(self, item):
        item.setArchList(self)

    def removeArchitecture(self, item):
        item.setArchList(None)

class JsPaths(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'js_paths'
    fields = (
        ('jumpstart', 'text'),
        ('netboot', 'text'),
        ('cache', 'text'),
        ('os', 'text'),
        ('install', 'text'),
    )
    unique = [('os',)]

    def getOsList(self):
        return OsList.getUnique(os = self['os'])

    def setOsList(self, item):
        if item == None:
            self['os'] = None
        else:
            self['os'] = item['os']

class Dirty(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'dirty'
    fields = (
        ('data', 'text'),
        ('dirty', 'bool'),
    )
    unique = [('data',)]

class ComponentOf(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'component_of'
    fields = (
        ('id', 'int4'),
        ('parent', 'int4'),
    )
    unique = [('id',)]

    def getEquipment(self):
        return Equipment.getUnique(id = self['parent'])

    def setEquipment(self, item):
        if item == None:
            self['parent'] = None
        else:
            self['parent'] = item['id']

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Usage(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'usage'
    fields = (
        ('usage', 'text'),
    )
    unique = [('usage',)]

    def getEquipments(self):
        return Equipment.getSome(usage = self['usage'])

    def addEquipment(self, item):
        item.setUsage(self)

    def removeEquipment(self, item):
        item.setUsage(None)

class OsType(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'os_type'
    fields = (
        ('os', 'text'),
        ('id', 'int4'),
    )
    unique = [('os', 'id')]

    def getOsList(self):
        return OsList.getUnique(os = self['os'])

    def setOsList(self, item):
        if item == None:
            self['os'] = None
        else:
            self['os'] = item['os']

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class Config(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'config'
    fields = (
        ('comment', 'text'),
        ('graphics', 'text'),
        ('memory', 'text'),
        ('disk', 'text'),
        ('cpu', 'text'),
        ('id', 'int4'),
    )
    unique = [('id',)]

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

class StatusList(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'status_list'
    fields = (
        ('status', 'text'),
    )
    unique = [('status',)]

    def getStatuses(self):
        return Status.getSome(status = self['status'])

    def addStatus(self, item):
        item.setStatusList(self)

    def removeStatus(self, item):
        item.setStatusList(None)

class Architecture(PyDO.PyDO):
    connectionAlias = 'udb'
    table = 'architecture'
    fields = (
        ('arch', 'text'),
        ('id', 'int4'),
    )
    unique = [('id',)]

    def getArchList(self):
        return ArchList.getUnique(arch = self['arch'])

    def setArchList(self, item):
        if item == None:
            self['arch'] = None
        else:
            self['arch'] = item['arch']

    def getEquipment(self):
        return Equipment.getUnique(id = self['id'])

    def setEquipment(self, item):
        if item == None:
            self['id'] = None
        else:
            self['id'] = item['id']

