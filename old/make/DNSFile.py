# $Id$

import time
import globals
import Utils
import TargetFile

class DNSFile(TargetFile.TargetFile):
    def __init__(self, db):
        TargetFile.TargetFile.__init__(self, db)
        self.targetDirName =  '/var/cache/bind/'
        self.includeHeaderFilename = '/cdb_dns.in'

    def getTargetDir(self):
        if globals.debug:
            return './tmp/'
        return self.targetDirName
    
    def getFirstNumberAfterParen(self, st):
        i = st.find('(')
        if i == -1:
            return None
        st = st[i+1:].lstrip()
        i = st.find(' ')
        if i == -1:
            return int(st)
        return int(st[0:i])
        
    def getSerialNumber(self, filename):
        line = self.getSOALine(filename)
        if line is None:
            return None
        return self.getFirstNumberAfterParen(line)

    def getSOALine(self, filename):
        f = file(filename, 'r')
        for line in f:
            line = self.strip_comment(line)
            if line == '' or line.isspace():
                continue
            if line.find('SOA') != -1:
                f.close()
                return line
        f.close()
        return None

    def strip_comment(self, st):
        i = st.find(';')
        if i == -1:
            return st
        return st[0:i]
        
    def addHeader(self, out):
        header = """;
;  FILE: %s
; DESCR: %s generated by %s version %s
;  DATE: %s
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DO NOT EDIT THIS FILE BY HAND! ALL DATA IS GENERATED BY CDB.
; USE CDB TO MODIFY OR INSERT RECORDS, OR EDIT %s
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
""" % ( self.getTargetFile(), self.descr, globals.prog, globals.version,
        time.ctime(), self.getIncludeFilename() )
        out.write(header)

    def addIncludeHeader(self, serial_num, out):        
        f = open(self.getIncludePath() + '/cdb_dns.in', 'r')
        for line in f:
            out.write(line.replace(r'%d', str(serial_num)))
        f.close()

    def addStaticData(self, serial_num, out):
        self.addHeader(out)
        self.addIncludeHeader(serial_num, out)
        self.includeFile(self.getIncludeFilename(), outfile)

    def createHeader(self):
        f = self.getBuildFile()
        serial_num = self.getSerialNumber(f)
        if serial_num is None:
            Utils.die("Can't get serial number from %s." % f)

        out = open(f, 'w')
        self.addHeader(out)
        self.addIncludeHeader(serial_num+1, out)
        return out        

class DNSForward(DNSFile):
    def __init__(self, db):
        DNSFile.__init__(self, db)
        self.targetFilename = '/var/cache/bind/db.cs'
        self.includeFilename = '/cdb_dns_db.in'
        self.buildFilename = '/db.cs'
        self.descr = 'DNS table'

    def build(self):
        Utils.verbose(2, 'forward...')
        output = self.createHeader()
        self.includeStaticData(output)

        alias_cache = self.db.getAliasCache()
        iter = self.db.getDNSData()
        while iter.hasNext():
            (nid, ipaddr, hostname, mxhost) = iter.next()
            self.writeAddressRecord(output, hostname, ipaddr)
            if nid in alias_cache:
                self.writeCnameRecord(output, hostname, alias_cache[nid])
            if mxhost:
                self.writeMxRecord(output, hostname, mxhost)
        output.close()

    def writeAddressRecord(self, out, hostname, ipaddr):
        out.write("%s IN  A     %s\n" % (hostname.ljust(21), ipaddr))

    def writeCnameRecord(self, out, hostname, aliases):
        for a in aliases:
            out.write("%s IN  CNAME %s.cs.brown.edu.\n" %
                      ( a.ljust(21), hostname ))

    def writeMxRecord(self, out, hostname, mxhost):
        out.write("%s IN  MX    10 %s.\n" % (hostname.ljust(21), mxhost) )

class DNSReverse(DNSFile):
    def __init__(self, db, subnet):
        DNSFile.__init__(self, db)
        self.includeFilename = '/cdb_dns_%s.in' % subnet
        self.targetFilename = '/var/cache/bind/db.128.148.%d' % subnet
        self.buildFilename = '/db.128.148.%d' % subnet
        self.descr = 'Reverse DNS table for subnet %d' % subnet
        self.subnet = subnet

    def build(self):
        Utils.verbose(2, 'reverse %d...' % self.subnet)
        output = self.createHeader()
        self.includeStaticData(output)

        iter = self.db.getReverseDNS(self.subnet)
        while iter.hasNext():
            (ipaddr, hostname) = iter.next()
            self.writePtrRecord(output, hostname, ipaddr)
        output.close()

    def writePtrRecord(self, out, hostname, ipaddr):
        nibbles = ipaddr.split('.')
        nibbles.reverse()
        ipaddr = '.'.join(nibbles) + '.IN-ADDR.ARPA.'
        out.write("%s IN  PTR   %s.cs.brown.edu.\n" % (ipaddr.ljust(31),
                                                       hostname))

