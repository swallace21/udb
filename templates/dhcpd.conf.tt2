[%- USE DBI( dbh = dbh ) -%]
#
#  FILE: [% filename %]
# DESCR: DHCP config generated by udb
#  DATE: [% date %]
#

##############################################################################
# DO NOT EDIT [% filename %] BY HAND!
# ALL dhcpd.conf DATA IS GENERATED BY UDB. USE UDB TO MODIFY OR INSERT 
# RECORDS, OR EDIT THE TEMPLATE.
##############################################################################

##
## Global Parameters
##

include "/etc/bind/rndc.key";

# dynamic DNS settings
ddns-updates on;
ddns-update-style interim;
ddns-domainname "smn.cs.brown.edu";

# Communication zone
zone smn.cs.brown.edu. {
  primary 128.148.38.9;
  key rndc-key;
}

#
# This dhcp server is authoritative, i.e. should know about all leases
#
authoritative;

#
# Default time for a lease (in seconds).  3600 = 1 hours
#
default-lease-time 3600;	

#
# Max time for lease (in seconds).  If a client requests a longer
# lease than usual, let them have it if less than 1 day.
#
max-lease-time 86400;

#
# WINS Server information
#	the netbios-name-servers entry points
#	to raisinets, currently for testing with the
#	\\guestprint issue.  nebios-node-type 2
#	means use wins server only
#	patpaul 6-2-06
#
option netbios-name-servers 128.148.33.125;
option netbios-node-type 2;

#
# Fully Automated Install (FAI) - debian unattended install options
#
option fai_config_src code 170 = text;
option fai_config_src "dmznfs.cs.brown.edu:/vol/fai/config";
option fai_install_server code 171 = text;
option fai_install_server "install.cs.brown.edu";
option fai_install_options code 172 = text;
option fai_install_options "createvt sshd";

#
# For PXELINUX clients
#
allow booting;
allow bootp;

#
# Only allow known clients
#
deny unknown-clients;

[% FOREACH subnet IN DBI.query("select nv.vlan_num, host(network(nv.network)) as network, host(nv.gateway) as gateway, host(broadcast(nv.network)) as broadcast, netmask(nv.network) as netmask, host(nv.dynamic_dhcp_start) as range_start, host(dynamic_dhcp_end) as range_end from net_vlans nv, net_zones nz where nv.zone_name = nz.zone_name and nz.zone_manager = 'tstaff' and nv.dhcp order by nv.vlan_num") -%]
#
# subnet declaration for the [% subnet.vlan_num %] subnet
#
subnet [% subnet.network %] netmask [% subnet.netmask %] {
    option routers [% subnet.gateway %];
    [%- SWITCH subnet.vlan_num %]
    [%-   CASE '898' %]
    option domain-name "ilab.cs.brown.edu cs.brown.edu";
    [%-   CASE '4007' %]
    option domain-name "smn.cs.brown.edu cs.brown.edu";
    [%-   CASE ['32', '892'] %]
    option domain-name cs.brown.edu";
    [%-   CASE DEFAULT %]
    option domain-name "cs.brown.edu smn.cs.brown.edu ilab.cs.brown.edu";
    [%- END %]
    [%- SWITCH subnet.vlan_num %]
    [%-   CASE ['32', '892'] %]
    option domain-name-servers 128.148.32.121;
    option ntp-servers 128.148.128.11;
    [%-   CASE DEFAULT %]
    option domain-name-servers 128.148.38.200, 128.148.38.54, 128.148.38.62;
    option ntp-servers 128.148.38.148, 128.148.33.79;
    [%- END %]
    option broadcast-address [% subnet.broadcast %];

    [%- SWITCH subnet.vlan_num %]
    [%-   CASE '36' %]
    default-lease-time 3600;
    max-lease-time 10800;
    [%-   CASE '4007' %]
    zone smn.cs.brown.edu. {
      primary 128.148.38.9;
      key "rndc-key";
    }

    zone 70.116.10.in-addr.arpa. {
      primary 128.148.39.9;
      key "rndc-key";
    }

    default-lease-time 3600;
    max-lease-time 10800;
    [%-   CASE DEFAULT %]
    default-lease-time 86400;
    max-lease-time 86400;
    [%- END %]

    [%- IF (subnet.range_start AND subnet.range_end) %]
    range [% subnet.range_start %] [% subnet.range_end %];

    [%- END -%]
}

[% END %]

#
# Statically assigned addresses
#

#
# PXElinux Clients
#
group {
    use-host-decl-names on;
    next-server pxe.cs.brown.edu;
    filename "pxelinux.0";

[% FOREACH host IN DBI.query("select ni.ethernet, na.ipaddr, fqdn_brown(nde.dns_name, nde.domain) as hostname from net_dns_entries nde join net_addresses na using (net_address_id) join net_addresses_net_interfaces nani using (net_address_id) join net_interfaces ni using (net_interface_id) left join (computers c left join os_types o using (os_type)) using (device_name) where ni.primary_address_id = na.net_address_id and ni.ethernet is not null and na.ipaddr is not null and na.enabled and nde.authoritative and ( nde.dns_region = 'all' or nde.dns_region = 'internal' ) and o.pxe_boot order by hostname") -%]
    host [% host.hostname %] {
        hardware ethernet [% host.ethernet %];
        fixed-address [% host.ipaddr %];
    }
[% END -%]

}

#
# Other Static DHCP Clients
#
group {
    use-host-decl-names on;

[% FOREACH host IN DBI.query("select ni.ethernet, na.ipaddr, fqdn_brown(nde.dns_name, nde.domain) as hostname from net_dns_entries nde join net_addresses na using (net_address_id) join net_addresses_net_interfaces nani using (net_address_id) join net_interfaces ni using (net_interface_id) left join (computers c left join os_types o using (os_type)) using (device_name) where ni.primary_address_id = na.net_address_id and ni.ethernet is not null and na.ipaddr is not null and na.enabled and nde.authoritative and ( nde.dns_region = 'all' or nde.dns_region = 'internal' ) and (not o.pxe_boot or o.pxe_boot is null) order by hostname") -%]
    host [% host.hostname %] {
        hardware ethernet [% host.ethernet %];
        fixed-address [% host.ipaddr %];
    }
[% END -%]

}

#
# Dynamic DHCP Clients
#
group {
    use-host-decl-names on;

[% FOREACH host IN DBI.query("select ethernet, device_name from devices join net_interfaces ni using (device_name) join net_addresses_net_interfaces nani using (net_interface_id) join (net_addresses na join net_zones nz using (zone_name)) using (net_address_id) where na.ipaddr is null and ni.ethernet is not null and nz.dynamic_dhcp order by device_name") -%]
    host [% host.device_name %] {
        hardware ethernet [% host.ethernet %];
    }
[% END -%]

}

# EOF
