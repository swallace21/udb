[%- USE DBI( dbh = dbh ) -%]
#
#  FILE: [% filename %]
# DESCR: DHCP config generated by udb
#  DATE: [% date %]    (date generated)
#
# DO NOT EDIT [% filename %] BY HAND!
# ALL dhcpd.conf DATA IS GENERATED BY UDB. USE UDB TO MODIFY OR INSERT 
# RECORDS, OR EDIT THE TEMPLATE.
#


##############################################################################
#
# General Server Settings
#
##############################################################################

#
# This dhcp server is authoritative: if someone tries to use an IP
# assignment we don't know about, we're allowed to DHCPNAK it.
#
authoritative;

#
# Only allow known clients
#
deny unknown-clients;

#
# For PXELINUX clients
#
allow booting;
allow bootp;


##############################################################################
#
# Dynamic DNS Configuration
#
##############################################################################

include "/etc/bind/rndc.key";

#
# Enable dynamic DNS
#
ddns-updates on;
ddns-update-style interim;

#
# Always use the name in host{} declarations, not client-supplied name
#
if known { ddns-host-name = host-decl-name; } 

#
# Update every time we hear from a client.  This assures that any oddities
# in DNS eventually go away.
#
update-optimization off;

#
# If a client claims they're going to define their own DNS name,
# ignore them. We want every live machine to have the name given them
# by udb.
#
ignore client-updates;


#
# SMN zones
#
zone smn.cs.brown.edu. {
  primary 128.148.31.200;
  key rndc-key;
}
zone 70.116.10.in-addr.arpa. {
  primary 128.148.31.200;
  key "rndc-key";
}

#
# eucalyptus zone
#
#zone euc.cs.brown.edu. {
#  primary 128.148.31.200;
#  key rndc-key;
#}

#
# internal servers, high speed interconnects
#
zone 101.116.10.in-addr.arpa. {
  primary 128.148.31.200;
  key "rndc-key";
}


##############################################################################
#
# Settings to apply to all clients
#
##############################################################################

#
# WINS Server information
#
# We need WINS until Samba can run an AD domain.
option netbios-name-servers 128.148.33.135, 128.148.33.152;
# Use point-to-point traffic (not broadcast) with the WINS server
option netbios-node-type 2;

#
# Tell clients their hostname is whatever's listed here
#
use-host-decl-names on;

#
# Clients' search domains
#
option domain-search "cs.brown.edu","smn.cs.brown.edu";

#
# NTP servers
#
option ntp-servers ntp-int.cs.brown.edu, ntp.cs.brown.edu, ntp.brown.edu;


##############################################################################
#
# Subnet declarations
#
##############################################################################

[% FOREACH subnet IN DBI.query("select nv.vlan_num, host(network(nv.network)) as network, host(nv.gateway) as gateway, host(broadcast(nv.network)) as broadcast, netmask(nv.network) as netmask, host(nv.dynamic_dhcp_start) as range_start, host(dynamic_dhcp_end) as range_end from net_vlans nv, net_zones nz where nv.zone_name = nz.zone_name and nz.zone_manager = 'tstaff' and nv.dhcp order by nv.vlan_num") -%]
#
# subnet declaration for the [% subnet.vlan_num %] subnet
#
subnet [% subnet.network %] netmask [% subnet.netmask %] {
    # Basic IP configuration
    [%- IF (subnet.range_start AND subnet.range_end) %]
    range [% subnet.range_start %] [% subnet.range_end %];
    [%- END %]
    option routers [% subnet.gateway %];
    option broadcast-address [% subnet.broadcast %];

    # DNS servers
    [%- SWITCH subnet.vlan_num %]
    [%-   CASE ['32', '36', '892', '897', '2239', '4008'] %]
    option domain-name-servers 128.148.32.121, 128.148.32.119, 128.148.32.123;
    [%-   CASE DEFAULT %]
    option domain-name-servers 128.148.31.200, 128.148.31.36, 128.148.31.60;
    [%- END %]

    # Tell clients what their domain name is
    [%- SWITCH subnet.vlan_num %]
    [%-   CASE '4007' %]
    option domain-name "smn.cs.brown.edu";
    [%-   CASE DEFAULT %]
    option domain-name "cs.brown.edu";
    [%- END %]

    # Lease times
    [%- SWITCH subnet.vlan_num %]
    [%-   CASE '4007' %]
    default-lease-time 3600;
    max-lease-time 10800;
    [%-   CASE DEFAULT %]
    default-lease-time 86400;
    max-lease-time 86400;
    [%- END %]

    [%- SWITCH subnet.vlan_num %]
    [%-   CASE '4007' %]
    # dynamic DNS options
    ddns-domainname "smn.cs.brown.edu";
    update-static-leases on;
    [%- END %]
}

[% END %]


##############################################################################
#
# Statically assigned addresses
#
##############################################################################

#
# PXElinux Clients
#
group {
    next-server pxe.cs.brown.edu;
    filename "pxelinux.0";

[% FOREACH host IN DBI.query("select ni.ethernet, na.ipaddr, fqdn_brown(nde.dns_name, nde.domain) as hostname from net_dns_entries nde join net_addresses na using (net_address_id) join net_addresses_net_interfaces nani using (net_address_id) join net_interfaces ni using (net_interface_id) left join (computers c left join os_types o using (os_type)) using (device_name) where ni.primary_address_id = na.net_address_id and ni.ethernet is not null and ni.master_net_interface_id is null and na.ipaddr is not null and na.enabled and nde.authoritative and ( nde.dns_region = 'all' or nde.dns_region = 'internal' ) and o.pxe_boot order by hostname") -%]
    host [% host.hostname %] {
        hardware ethernet [% host.ethernet %];
        fixed-address [% host.ipaddr %];
    }
[% END -%]

}

#
# Other Static DHCP Clients
#
group {

[% FOREACH host IN DBI.query("select ni.ethernet, na.ipaddr, fqdn_brown(nde.dns_name, nde.domain) as hostname from net_dns_entries nde join net_addresses na using (net_address_id) join net_addresses_net_interfaces nani using (net_address_id) join net_interfaces ni using (net_interface_id) left join (computers c left join os_types o using (os_type)) using (device_name) where ni.primary_address_id = na.net_address_id and ni.ethernet is not null and ni.master_net_interface_id is null and na.ipaddr is not null and na.enabled and nde.authoritative and ( nde.dns_region = 'all' or nde.dns_region = 'internal' ) and (not o.pxe_boot or o.pxe_boot is null) order by hostname") -%]
    host [% host.hostname %] {
        hardware ethernet [% host.ethernet %];
        fixed-address [% host.ipaddr %];
    }
[% END -%]

}

#
# Dynamic DHCP Clients
#
group {

[% FOREACH host IN DBI.query("select ethernet, device_name from devices join net_interfaces ni using (device_name) join net_addresses_net_interfaces nani using (net_interface_id) join (net_addresses na join net_zones nz using (zone_name)) using (net_address_id) where na.ipaddr is null and ni.ethernet is not null and ni.master_net_interface_id is null and nz.dynamic_dhcp order by device_name") -%]
    host [% host.device_name %] {
        hardware ethernet [% host.ethernet %];
    }
[% END -%]

}

# EOF
