#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use NetAddr::IP;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;
my $username = $ENV{'USER'};

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
  'n|dryrun' => \$dryrun,
  'u|username=s' => \$username
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;


if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

my $existing_device = $udb->resultset('Devices')->find($name);
die "Device $name already exists.\n" if $existing_device;

print <<'EOF';
-----------------------------------------------------------
This script assumes that you are adding a standard computer.
If any of the following are true:

  - The device is a printer/switch/etc., not a computer
  - The device has more than one network card
  - The device will have more than one IP address
  - The device will be a server
  - The device will be a virtual host
  - The device will not located inside the CIT
  - The device's domain name is not 'cs.brown.edu' (i.e. ilab)

then you need to use udb-long-add instead.
-----------------------------------------------------------
EOF

my @management_types = $udb->resultset('ManagementTypes')->get_column("name")->all;
my $management_preamble = <<EOF;
Who is in charge of managing this computer?
EOF
my $management_prompt = "\n${management_preamble}Managed by:";
my $managed_by = choose($management_prompt, \@management_types);

my @os_types = ('', $udb->resultset('OsTypes')->get_column("name")->all);
my $os_preamble = <<EOF;
What OS will this computer have?
If you don't know, or if this computer is user-maintained,
you can safely leave this blank.
EOF
my $os_prompt = "\n${os_preamble}OS [default: none]:";
my $os = choose($os_prompt, \@os_types);
if (not $os) {
  $os = undef;
}

my $classes_preamble = <<EOF;
What OS classes should this computer belong to?
If you don't know, just say 'desktop' for a department workstation,
or leave it blank for a user-maintained computer.
EOF
my $classes_prompt = "\n${classes_preamble}Classes [comma-separated list]:";
my $classes_str = ask($classes_prompt,'');

my $ip_or_vlan_preamble = <<EOF;
What is the computer's IP address?
If you just want an arbitrary IP in a given VLAN (e.g. 31, 36),
enter the VLAN number, and an IP will be picked for you.
EOF
my $ip_or_vlan_prompt = "\n${ip_or_vlan_preamble}IP or VLAN:";
my $ip_or_vlan_str = demand($ip_or_vlan_prompt, verify_ip_or_vlan($udb));

my $walljack_preamble = <<EOF;
What wall jack will the computer be plugged into?
If this computer will not be tied to any particular wall jack (e.g.
laptops), or if you aren't sure which wall jack the computer will be
attached to, you can safely leave this blank and fill it in later.
EOF
my $walljack_prompt = "\n${walljack_preamble}Wall jack:";
my $walljack_str = demand($walljack_prompt, verify_walljack($udb));

my $ethernet = demand("\nMAC address:", verify_mac($udb));
my $room = ask("\nRoom number:",undef);
my $contact = demand("\nPrimary user:");
my $owner = ask("\nWho paid for this computer?\nOwner [default: primary user]:",$contact);
my $comments = ask("\nComments [optional]:",undef);

my $db_coderef = sub {

  my $loc = $udb->resultset('Places')->find_or_create({
      city => 'Providence',
      building => 'CIT',
      room => $room,
    });

  my $comp = $udb->resultset('Computers')->create({
      os => $os,
      device => {
        equip_status => 'deployed',
        managed_by => $managed_by,
        name => $name,
        contact => $contact,
        owner => $owner,
        location => $loc,
        comments => $comments,
      },
    });

  $classes_str =~ s/\s//g;
  my @classes = split(/,/, $classes_str);

  if ( $#classes != -1 ) {
    foreach (@classes) {
      my $class = $udb->resultset('CompClasses')->find_or_create({
          name => $_,
          os_type => $os,
        });
      $comp->add_to_comp_classes($class);
    }
  }

  my $device = $comp->device;

  my ($ipaddr, $vlan) = verify_ip_or_vlan($udb)->($ip_or_vlan_str);
  print $vlan, "\n";
  
  my $addr = $udb->resultset('NetAddresses')->create({
        vlan => $vlan,
        ipaddr => $ipaddr,
        monitored => 0,
      });
  
  dns_insert_both($name, 'cs.brown.edu', $addr, 1);
  
  my $port = verify_walljack($udb)->($walljack_str);

  my $iface = $device->add_to_net_interfaces({
      device => $device,
      ethernet => $ethernet,
      primary_address => $addr,
      port => $port,
    });

  $addr->add_to_net_interfaces($iface);

#  foreach my $vlan_num (@vlans) {
#    print "bind port $wall_plate to vlan $vlan_num\n";
#    my $vlan = $udb->resultset('NetVlans')->find($vlan_num);
#    $port->add_to_net_vlans($vlan);
#  }

  #switchport

};

my $rs;
eval {
  $rs = $udb->txn_do($db_coderef);
};

if ($@) {
  die <<EOF;
Failed to add $name. Try again.

Details:
  $@
EOF
}

sub dns_insert {
  my ($a, $b, $c, $d, $e) = @_;
  $udb->resultset('NetDnsEntries')->find_or_create({
      dns_name => $a,
      domain => $b,
      address => $c,
      authoritative => $d,
      dns_region => $e,
    });
}

sub dns_insert_both {
  my ($a, $b, $c, $d) = @_;
  dns_insert($a, $b, $c, $d, "internal");
  dns_insert($a, $b, $c, $d, "external");
}

__END__

=head1 NAME

udb-add - Add a device to UDB

=head1 SYNOPSIS

udb-add [-u username] <device>

=head1 DESCRIPTION

adds a device to the database

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-u>, B<--username>=user

Logs onto the database server as the specified username, instead of as
the current user.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

