#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console;
use BrownCS::udb::DeviceHash;

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;

GetOptions (
  'help|h|?' => \$help, 
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);
my $udh = new BrownCS::udb::DeviceHash(udb => $udb);

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

my @candidate_devices = ();

# device with name LIKE what we're looking for
my $device_rs = $udb->resultset('SurplusDevices')->search({
    name => { '~*' => $name },
  });
if ($device_rs) {
  while (my $device = $device_rs->next) {
    push @candidate_devices, $device;
  }
}

my %seen_devices = ();
foreach my $device (@candidate_devices) {
  if (not $seen_devices{$device->name}) {
    $seen_devices{$device->name} = 1;
    print "\n";
    $uc->print_record('', $udh->format_surplus($device));
  }
}

if (%seen_devices) {
  exit(0);
}

die "Couldn't find anything matching $name.\n";

__END__

=head1 NAME

udb-show-surplus - Print out information about a surplus device

=head1 SYNOPSIS

udb-show-surplus <device>

=head1 DESCRIPTION

udb-show-surplus queries the UDB database for information about a surplus
device, and prints it out to the console. It is designed to resemble the old
I<index surplus> command.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

