#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Build;
use BrownCS::udb::Util qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $udb = BrownCS::udb::Schema->connect;
my $dryrun = 0;
my $verbose = 0;

BEGIN { $| = 1 }

GetOptions (
  'help|h|?' => \$help, 
  'n|dryrun' => \$dryrun,
  'v|verbose' => \$verbose,
) or usage(2);
usage(1) if $help;

if (@ARGV > 0) {
  usage(2);
}

my $ub = new BrownCS::udb::Build(udb => $udb, verbose => $verbose, dryrun => $dryrun);

if (not $dryrun) {

  my $privs;
  $privs += BrownCS::udb::Util::okay_adminhost;
  $privs += BrownCS::udb::Util::okay_kerberos;
  if ($privs != 2) {
    print "Insufficient privileges. Check your warnings. \n";
    exit;
  }


$ub->build_netgroup;

  if(BrownCS::udb::Util::okay_root_silent && not BrownCS::udb::Util::okay_sudo){
    exit;
  }

  if(not BrownCS::udb::Util::okay_root_silent){
    system("sudo \"$RealBin/udb-build\"");
    exit;
  }

$ub->build_tftpboot;
$ub->build_dhcp;
$ub->build_nagios;
$ub->build_wpkg_hosts;
$ub->build_dns;
$ub->build_finger_data;
}


__END__

=head1 NAME

build - build system databases/config files from udb

=head1 SYNOPSIS

build

=head1 DESCRIPTION

builds stuff

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done. Files which would
normally be copied to servers are instead left in /tmp. 

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

