#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use lib "/home/aleks/pro/tstaff/udb/lib";
use BrownCS::UDB;
use BrownCS::UDB::Util qw(ask_password get_date fmt_time);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 99, -sections => "SYNOPSIS|DESCRIPTION|OPTIONS"});
}

my $help = 0;
my $username = $ENV{'USER'};
my $udb = BrownCS::UDB->new;
my $dry_run = 1;
my $verbose = 0;

GetOptions ('help|h|?' => \$help, 
            'X' => \$dry_run,
            'v|verbose' => \$verbose,
            'u' => \$username) or usage(2);
usage(1) if $help;

if (@ARGV > 0) {
  usage(2);
}

my $password = &ask_password;

$udb->start($username, $password);

# Define the name of the UNIX login which should own NIS, DNS maps
my $CDB_MAP_OWNER = 'root';

# Define the name of the UNIX group for NIS, DNS maps
my $CDB_MAP_GROUP = 'sys';

# Define the octal mode permissions for NIS, DNS maps
my $CDB_MAP_PERMS = 0444;

# Define the pathname of the directory for saving DNS maps
my $CDB_DNS_DIR = '/var/named/src';

# Define the list of forward lookup DNS DBs
my @CDB_DNS_FWD_DBS = qw(cs ilab);

# Define a list of Internal DNS servers
my @CDB_DNS_SERVERS = qw(payday snickers);

# Define a list of DHCP servers
my @CDB_DHCP_SERVERS = qw(payday snickers);

# Define the pathname for the filers local netgroup file
my @CDB_NETGROUP_DIRS = qw(/maytag/root/etc /amana/root/etc);

# Define the DNS domain name
my $CDB_DNS_DOMAIN = 'cs.brown.edu';

# Define DNS mxhost preference value
my $CDB_DNS_MXPREF = 10;

# CDB include directory
my $CDB_INCLUDE_DIR = '/u/system/include';

# Define a list of IP address subnets

my @cdb_classC_subnets = ( 31, 32, 33, 34, 36, 37, 38 );
my @cdb_classB_subnets = ( 116 );

# Define a list of valid status strings

my @cdb_status_strings = ('active', 'home', 'disabled', 'monitored', 'ugrad-monitored');

# Define a hash of maps to build and the corresponding output filename 

my %cdb_map_files = (
  'dhcp' => '/maytag/sys0/dhcp/dhcpd.conf',
  'dhcp' => '/u/system/include/cdb_dhcp.in',
);

# Define a hash of maps to build and the corresponding include file pathname

my %cdb_map_includes = (
);

&build_tftpboot;
#build_netgroup;
#build_dhcp;
&build_nagios_hosts;
#build_nagios_services;
&build_wpkg_hosts;
#setup_dns_db;
#build_dns_headers;
#build_dns;
&build_ypmake;

END {
  $udb->finish;
}

sub maybe_system {
  if ($dry_run) {
    print "DEBUG: @_\n";
  } else {
    system(@_);
  }
}

#
# FUNCTION: build_tftpboot
#    DESCR: Rebuild the tftp network boot directory
#

sub build_tftpboot {

  my $tftpboot_path = "/tftpboot/pxelinux.cfg";

  my $sth = $udb->prepare("select na.ipaddr, c.hw_arch, c.os, c.pxelink from net_addresses na, net_interfaces ni, net_addresses_net_interfaces nani, computers c where ni.equipment_id = c.equipment_id and nani.net_addresses_id = na.id and nani.net_interfaces_id = ni.id");

  $sth->execute();
  my $array_ref = $sth->fetchall_arrayref({});

  foreach my $addr (@{$array_ref}) {

    my $bootimage;

    next if not defined $addr->{os};
    next if not defined $addr->{hw_arch};
    next if not defined $addr->{ipaddr};

    if (defined $addr->{pxelink}) {
      $bootimage = $addr->{pxelink};
    } elsif ($addr->{os} eq 'linux') {
      $bootimage = ("fai-workstation-" . $addr->{hw_arch});
    } elsif ($addr->{os} eq 'linux-server') {
      $bootimage = ("fai-server-" . $addr->{hw_arch});
    }
      
    if(!defined($bootimage)) {
      next;
    }

    $addr->{ipaddr} =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/;

    my $hex_ip = sprintf("$tftpboot_path/%0.2X%0.2X%0.2X%0.2X", $1, $2, $3, $4);

    if(!$dry_run) {
      unlink("$tftpboot_path/$hex_ip");
      symlink("$bootimage", "$tftpboot_path/$hex_ip") ||
        warn "cdb-build: ERROR: Failed to create link $hex_ip: $!\n";
    } else {
      print "DEBUG: $hex_ip -> $bootimage\n";
    }
  }
}

### sub add_to_group {
###   my ($netgroups, $grp, $host) = @_;
### 
###   if(defined($netgroups->{$grp})) {
###     $netgroups->{$grp} .= " (${host},,)";
###   } else {
###     $netgroups->{$grp} = "(${host},,)";
###   }
### 
### }
### 
### #
### # FUNCTION: build_netgroup
### #    DESCR: Generate a new /var/yp/src/netgroup file from the database
### #
### 
### sub build_netgroup {
###   my($file, $include) = @_;
###   my(%netgroups) = ();
###   my($primgrp, $line, $length, $gridx, $grsubname, $grsubidx);
###   my(@grmem, @grsub, @inctext);
### 
###   my $PATH_TMPFILE = $file . '.tmp';
### 
###   open(NETGROUP, ">$PATH_TMPFILE") ||
###     die "cdb-build: ERROR: Failed to open $PATH_TMPFILE: $!\n";
### 
###   print NETGROUP "#\n#  FILE: $file\n",
###     "# DESCR: NIS netgroup map generated by cdb-build\n",
###     "#  DATE: ", get_date(), "\n#\n\n";
### 
###   if(-s ("$include")) {
###     open(INCLUDE, "<$include") ||
###       die "cdb-build: ERROR: Failed to open include $include: $!\n";
### 
###     @inctext = <INCLUDE>;
###     print NETGROUP @inctext;
###     close(INCLUDE);
###   }
### 
###   foreach my $host (keys(%$cdb_by_hostname)) {
###     $primgrp = $cdb_by_hostname->{$host}{'prim_grp'};
### 
###     add_to_group(\%netgroups, $primgrp, $host);
### 
###     foreach my $class (split(/,/, $cdb_by_hostname->{$host}{'classes'})) {
###       if ($class =~ /^camera$/) {
###         add_to_group(\%netgroups, "camera", $host);
###       } elsif ($class =~ /^cgc$/) {
###         add_to_group(\%netgroups, "cgc", $host);
###       } elsif ($class =~ /^graphics$/) {
###         add_to_group(\%netgroups, "graphics", $host);
###       } elsif ($class =~ /^fun$/) {
###         add_to_group(\%netgroups, "ugrad", $host);
###       } elsif ($class =~ /^ssh\.forward$/) {
###         add_to_group(\%netgroups, "sunlab", $host);
###       } elsif ($class =~ /^tstaff-netgroup$/) {
###         add_to_group(\%netgroups, "tstaff", $host);
###       } elsif ($class =~ /^thermo$/) {
###         add_to_group(\%netgroups, "thermo", $host);
###       } elsif ($class =~ /^liebert$/) {
###         add_to_group(\%netgroups, "liebert", $host);
###       } elsif ($class =~ /^server$/) {
###         add_to_group(\%netgroups, "server", $host);
###       }
###     }
###   }
### 
###   # Annoying hack: ndbm limits us to 1024-byte datum.  Decompose groups
###   # of greater than 32 elements into subgroups as a workaround.
###   
###   $gridx = 0;
### 
###   foreach my $grp (keys(%netgroups)) {
###     @grmem = split(/ /, $netgroups{$grp});
### 
###     if(scalar(@grmem) > 32) {
###       delete $netgroups{$grp};
###       $netgroups{$grp} = '';
###       $grsubidx = 0;
### 
###       while(scalar(@grmem) > 0) {
###         @grsub = splice(@grmem, 0, (scalar(@grmem)>32) ? 32 : scalar(@grmem));
###         $grsubname = "0-" . $gridx . "-" . $grsubidx++;
###         $netgroups{$grsubname} = join(' ', @grsub);
### 
###         if($netgroups{$grp} ne '') {
###           $netgroups{$grp} .= " $grsubname";
###         } else {
###           $netgroups{$grp} = $grsubname;
###         }
###       }
### 
###       $gridx++;
###     }
###   }
### 
###   # End of ndbm hack
### 
###   foreach my $grp (sort(keys(%netgroups))) {
###     print NETGROUP "# Netgroup $grp\n\n";
###     $line = "$grp\t";
### 
###     @grmem = split(/ /, $netgroups{$grp});
###     foreach my $i (0 .. $#grmem) {
###       if((length($line) + length($grmem[$i]) + 11) < 80) {
###         $line .= $grmem[$i] . ' ';
###       } else {
###         print NETGROUP $line, ($i < $#grmem) ? "\\\n" : '';
###         $line = $grmem[$i] . ' ';
###       }
###     }
### 
###     print NETGROUP $line, "\n\n";
###   }
### 
###   print NETGROUP "\n# EOF\n";
###   close(NETGROUP);
### 
###   die "cdb-build: ERROR: Failed to rename $file: $!\n" if(!rename("$PATH_TMPFILE", "$file"));
###   foreach my $dir (@CDB_NETGROUP_DIRS) {
###     maybe_system("cp -p $file $dir/netgroup");
###     if ( $? != 0 ) {
###       warn "cdb-build: ERROR: Failed to copy netgroup file to $dir\n";
###     }
###   }
### 
### }
### 
### sub build_dhcp {
###     my($file, $include) = @_;
###     my(@all_hosts) = keys(%$cdb_by_hostname);
###     my(@inctext, @pxe_hosts, @ppc_pxe_hosts, @dynamic_hosts, @other_hosts);
###     my($primgrp, $ethernet, $status);
### 
###     foreach my $host (@all_hosts) {
###       # make sure only hosts with ethernet address are entered into the
###       # DHCP tables
###       next unless ($cdb_by_hostname->{$host}{'ethernet'});
### 
###       $prim_grp = $cdb_by_hostname->{$host}{'prim_grp'};
###       $arch = $cdb_by_hostname->{$host}{'hw_arch'};
###       if($prim_grp eq "linux" || $prim_grp eq "ilab" || \
###          $prim_grp eq "private" || $prim_grp eq "standalone" ) {
###         if ($arch eq "ppc") {
###           push @ppc_pxe_hosts, $host;
###         } else {
###           push @pxe_hosts, $host;
###         }
###       } elsif($prim_grp eq "dynamic") {
###         push @dynamic_hosts, $host;
###       } else {
###         push @other_hosts, $host;
###       }
###     }
###     
###     my $PATH_TMPFILE = $file . '.tmp';
### 
###     open(DHCP, ">$PATH_TMPFILE") ||
###       die "cdb-build: ERROR: Failed to open $PATH_TMPFILE: $!\n";
### 
###     print DHCP "#\n#  FILE: $file\n",
###     "# DESCR: DHCP config generated by cdb-build\n",
###     "#  DATE: ", get_date(), "\n#\n\n";
### 
###     if(-s ("$include")) {
###         open(INCLUDE, "<$include") ||
###           die "cdb-build: ERROR: Failed to open include $include: $!\n";
### 
###         @inctext = <INCLUDE>;
###         print DHCP @inctext;
###         close(INCLUDE);
###     }
### 
###     print DHCP "#\n";
###     print DHCP "# PXElinux Clients\n";
###     print DHCP "#\n";
### 
###     print DHCP "group {\n";
###     print DHCP "    use-host-decl-names on;\n";
###     print DHCP "    next-server pxe.cs.brown.edu;\n";
###     print DHCP "    filename \"pxelinux.0\"\;\n\n";
###     foreach my $host (@pxe_hosts) {
###         $ethernet = $cdb_by_hostname->{$host}{'ethernet'};
###         next unless ( $ethernet );
### 
###         # only include hosts that are listed as active or monitored
###         $status = $cdb_by_hostname->{$host}{'status'};
###         next unless ( $status eq "active" || $status eq "monitored" || $status eq "ugrad-monitored" );
### 
###         print DHCP "    host $host {\n";
###         print DHCP "        hardware ethernet $ethernet;\n";
###         print DHCP "        fixed-address $host;\n";
###         print DHCP "    }\n";
###     }
###     print DHCP "}\n\n";
### 
###     print DHCP "#\n";
###     print DHCP "# PPC yaboot Clients\n";
###     print DHCP "#\n";
### 
###     print DHCP "group {\n";
###     print DHCP "    use-host-decl-names on;\n";
###     print DHCP "    next-server pxe.cs.brown.edu;\n";
###     print DHCP "    filename \"yaboot\"\;\n\n";
###     foreach my $host (@ppc_pxe_hosts) {
###         $ethernet = $cdb_by_hostname->{$host}{'ethernet'};
###         next unless ( $ethernet );
### 
###         # only include hosts that are listed as active or monitored
###         $status = $cdb_by_hostname->{$host}{'status'};
###         next unless ( $status eq "active" || $status eq "monitored" || $status eq "ugrad-monitored" );
### 
###         print DHCP "    host $host {\n";
###         print DHCP "        hardware ethernet $ethernet;\n";
###         print DHCP "        fixed-address $host;\n";
###         print DHCP "    }\n";
###     }
###     print DHCP "}\n\n";
### 
###     print DHCP "#\n";
###     print DHCP "# Other Static DHCP Clients\n";
###     print DHCP "#\n";
### 
###     print DHCP "group {\n";
###     print DHCP "    use-host-decl-names on;\n";
###     foreach my $host (@other_hosts) {
###         $ethernet = $cdb_by_hostname->{$host}{'ethernet'};
###         next unless ( $ethernet );
### 
###         # only include hosts that are listed as active or monitored
###         $status = $cdb_by_hostname->{$host}{'status'};
###         next unless ( $status eq "active" || $status eq "monitored" || $status eq "ugrad-monitored" );
### 
###         print DHCP "    host $host {\n";
###         print DHCP "        hardware ethernet $ethernet;\n";
###         print DHCP "        fixed-address $host;\n";
###         print DHCP "    }\n";
###     }
###     print DHCP "}\n\n";
### 
###     print DHCP "#\n";
###     print DHCP "# DHCP Clients\n";
###     print DHCP "#\n";
### 
###     print DHCP "group {\n";
###     print DHCP "    use-host-decl-names on;\n";
###     foreach my $host (@dynamic_hosts) {
###         $ethernet = $cdb_by_hostname->{$host}{'ethernet'};
###         next unless ( $ethernet );
### 
###         # only include hosts that are listed as active
###         $status = $cdb_by_hostname->{$host}{'status'};
###         next unless ( $status eq "active" );
### 
###         print DHCP "    # $cdb_by_hostname->{$host}{'comment'}\n";
###         print DHCP "    host $host {\n";
###         print DHCP "        hardware ethernet $ethernet;\n";
###         print DHCP "    }\n";
###     }
###     print DHCP "}\n";
### 
###     print DHCP "\n# EOF\n";
###     close(DHCP);
###     
###     die "cdb-build: ERROR: Failed to rename $file: $!\n"
###       if(!rename("$PATH_TMPFILE", "$file"));
### 
###     # send new config file to each server
###     foreach my $host (@CDB_DHCP_SERVERS) {
###       maybe_system('scp', '-pq', $file, "$host:/etc");
###       if ( $? != 0 ) {
###         warn "cdb-build: ERROR: Failed to copy DNS files to $host\n";
###       }
###     }
### 
###     maybe_system('ssh', '-x', 'dhcp', '/etc/init.d/dhcp restart');
### }

# 
# FUNCTION: build_nagios_hosts
#    DESCR: Generate the nagios hosts.cfg file
#

sub build_nagios_hosts {

  #my $file = '/maytag/sys0/Linux/files/add/group.debian.server.nagios3/etc/nagios3/conf.d/hosts.cfg';
  my $file = '/tmp/hosts.cfg';
  my $include = '/u/system/include/cdb_nagios_hosts.in';

  my(@inctext, $primgrp, $aliases, $tabs, $hostref);

  my $PATH_TMPFILE = $file . '.tmp';

  open(OUT, ">$PATH_TMPFILE") ||
    die "cdb-build: ERROR: Failed to open $PATH_TMPFILE: $!\n";

  print OUT "#\n#  FILE: $file\n",
    "# DESCR: nagios hosts.cfg generated by cdb-build\n",
    "#  DATE: ", get_date(), "\n#\n";

  if(-s ("$include")) {
    open(INCLUDE, "<$include") ||
      die "cdb-build: ERROR: Failed to open include $include: $!\n";

    @inctext = <INCLUDE>;
    print OUT @inctext;
    close(INCLUDE);
  }
  my ($sth, $array_ref);

  $sth = $udb->prepare("select na.ipaddr, na.dns_name, na.domain from net_addresses na where na.monitored = true and na.enabled = true");

  $sth->execute();
  $array_ref = $sth->fetchall_arrayref({});

  foreach my $addr (@{$array_ref}) {
    my $hostname = $addr->{dns_name};
    if ($addr->{domain} ne 'cs.brown.edu') {
      $hostname .= $addr->{domain};
    }
    my $ip_addr = $addr->{ipaddr};

    print OUT "define host{\n";
    print OUT "\tuse\t\t\thost_template\n";
    print OUT "\thost_name\t\t$hostname\n";
    print OUT "\taddress\t\t\t$ip_addr\n";
    print OUT "}\n\n";
  }

  print OUT "# EOF\n";
  close(OUT);

  if ($dry_run) {
    print "DEBUG: rename $PATH_TMPFILE to $file\n";
  } else {
    die "cdb-build: ERROR: Failed to rename $file: $!\n" if(!rename("$PATH_TMPFILE", "$file"));
  }

  # send new config file to each server
  maybe_system('scp', '-pq', $file, "storm:/etc/nagios3/conf.d/");
  if ( $? != 0 ) {
    warn "cdb-build: ERROR: Failed to copy nagios files to storm\n";
  }

  maybe_system('ssh', '-x', 'storm', '/etc/init.d/nagios3 restart');

}

# 
# FUNCTION: build_nagios_services
#    DESCR: Generate the nagios services.cfg file
#

### sub build_nagios_services {
### 
###   my $file = '/maytag/sys0/Linux/files/add/group.debian.server.nagios3/etc/nagios3/conf.d/services.cfg';
###   my $include = '/u/system/include/cdb_nagios_services.in';
### 
###   my(@hosts) = keys(%$cdb_by_hostname);
###   my(@inctext, $primgrp, $aliases, $tabs, $hostref);
### 
###   my $PATH_TMPFILE = $file . '.tmp';
### 
###   open(OUT, ">$PATH_TMPFILE") ||
###     die "cdb-build: ERROR: Failed to open $PATH_TMPFILE: $!\n";
### 
###   print OUT "#\n#  FILE: $file\n",
###     "# DESCR: nagios services.cfg generated by cdb-build\n",
###     "#  DATE: ", get_date(), "\n#\n";
### 
###   if(-s ("$include")) {
###     open(INCLUDE, "<$include") ||
###       die "cdb-build: ERROR: Failed to open include $include: $!\n";
### 
###     @inctext = <INCLUDE>;
###     print OUT @inctext;
###     close(INCLUDE);
###   }
### 
###   foreach my $host (@hosts) {
###     my $hostref = $cdb_by_hostname->{$host};
###     my $prim_grp = $hostref->{'prim_grp'};
###     my $ip_addr = $hostref->{'ip_addr'};
### 
###     next unless ( $hostref->{'status'} eq "monitored" );
### 
###     print OUT "define service{\n";
###     print OUT "\tuse\t\t\tping_template\n";
###     print OUT "\thost_name\t\t$host\n";
###     print OUT "}\n\n";    
### 
###     my @classes = split(/,/, $hostref->{'classes'});
### 
###     for (@classes) {
### 
###       if (/printer/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tprinter_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";    
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tqueuing_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "\tcheck_command\t\tcheck-queuing!$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/smtp/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tsmtp_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";    
### 
###       } elsif (/ftp/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tftp_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";    
### 
###       } elsif (/http/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\thttp_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";    
### 
###       } elsif (/imap/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\timap_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";    
### 
###       } elsif (/pop/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tpop_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";    
### 
###       } elsif (/dns/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tdns_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tdns_internal_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";    
### 
###       } elsif (/dhcp/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tdhcp_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/telnet/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\ttelnet_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/liebert/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tliebert_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "\tcontact_groups\t\tspoc_group,tstaff_group\n";
###         print OUT "}\n\n";
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tliebert_alarms_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "\tcontact_groups\t\tspoc_group,tstaff_group\n";
###         print OUT "}\n\n";
### 
###       } elsif (/thermo/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tthermo_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "\tcontact_groups\t\temergency_group,spoc_group,tstaff_group\n";
###         print OUT "}\n\n";
### 
###       } elsif (/pgsql/|/postgresql\.db/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tpgsql_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/netapp/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tnetapp_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/ntp/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tntp_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/ssh/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tssh_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/mailman/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tmailman_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/spamassassin/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tspamd_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\typbind_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";   
### 
###       } elsif (/sge/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tsge_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/flexlm/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tflexlm_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/tierfs/) {
### 
###         my @disks = split(/:/, $hostref->{'classes'});
###         foreach my $disk (@disks) {
###           if($disk =~ /.*disk.*/) {
###             my @fields = split(/ /, $disk);
###             $fields[0] =~ s/disk\=//;
###             print OUT "define service{\n";
###             print OUT "\tuse\t\t\tdiskusage_template\n";
###             print OUT "\thost_name\t\t$host\n";
###             print OUT "\tcheck_command\t\tssh-check-disk!$fields[0]!$fields[1]!$fields[2]\n";
###             print OUT "\tservice_description\t$fields[0] usage\n";
###             print OUT "}\n\n";
###           }
###         }
### 
###       } elsif (/ldap\.server\.db/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tldap_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/drbd/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tdrbd_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       } elsif (/krb/) {
### 
###         print OUT "define service{\n";
###         print OUT "\tuse\t\t\tkrb_template\n";
###         print OUT "\thost_name\t\t$host\n";
###         print OUT "}\n\n";
### 
###       }
### 
###     }
### 
###   }
### 
###   print OUT "# EOF\n";
###   close(OUT);
### 
###   die "cdb-build: ERROR: Failed to rename $file: $!\n"
###     if(!rename("$PATH_TMPFILE", "$file"));
### 
###   # send new config file to each server
###   maybe_system('scp', '-pq', $file, "storm:/etc/nagios3/conf.d/");
###   if ( $? != 0 ) {
###     warn "cdb-build: ERROR: Failed to copy nagios files to $host\n";
###   }
### 
###   maybe_system('ssh', '-x', 'storm', '/etc/init.d/nagios3 restart');
### 
### }

# 
# FUNCTION: build_wpkg_hosts
#    DESCR: Generate the wpkg hosts.xml file
#

sub build_wpkg_hosts {

  my $file = '/u/system/win32/WPKG/hosts/cdb.xml';

  my(@inctext, $primgrp, $aliases, $tabs, $hostref);

  my $PATH_TMPFILE = $file . '.tmp';

  open(OUT, ">$PATH_TMPFILE") ||
    die "cdb-build: ERROR: Failed to open $PATH_TMPFILE: $!\n";

  print OUT '<?xml version="1.0" encoding="UTF-8"?>', "\n";

  print OUT "<!--\n",
    "FILE: $file\n",
    "DESCR: wpkg hosts.xml generated by cdb-build\n",
    "DATE: ", get_date(), "\n",
    "-->\n\n";

  print OUT '<wpkg>', "\n";

  my ($sth, $array_ref);

  $sth = $udb->prepare("select e.name, cc.class from equipment e, comp_classes cc, computers c, comp_classes_computers ccc where ccc.comp_classes_id = cc.id and ccc.computers_id = c.id and c.equipment_id = e.id");
  $sth->execute();
  $array_ref = $sth->fetchall_arrayref({});

  my %host_classes = ();

  foreach my $ccc (@{$array_ref}) {
    if (not defined @host_classes{$ccc->{name}}) {
      $host_classes{$ccc->{name}} = [];
    }
    push @{$host_classes{$ccc->{name}}}, $ccc->{class};
  }

  $sth = $udb->prepare("select e.name, c.os from equipment e, computers c, management_types m where c.equipment_id = e.id and m.description = 'tstaff' and m.id = e.managed_by");
  $sth->execute();
  $array_ref = $sth->fetchall_arrayref({});

  foreach my $host (@{$array_ref}) {

    my $hostname = $host->{name};
    my $os = $host->{os};

    next unless((defined $os) and (($os eq 'winxp') or ($os eq 'vista')));

    # generate profile list

    my @wpkg_profiles = ();

    print $hostname . "\n";

    my $classes_ref = $host_classes{$hostname};

    next unless defined $classes_ref;

    my @classes = @{$classes_ref};

    if ($os eq 'winxp') {
      push @wpkg_profiles, "winxp";
    } elsif ($os eq 'vista') {
      push @wpkg_profiles, "vista";
    }

    for (@classes) {

      if (/^desktop$/) {
        push @wpkg_profiles, "desktop";
        push @wpkg_profiles, "$os-dept";
      }

      if (/^classroom$/) {
        push @wpkg_profiles, "classroom";
      }

      if (/^maya$/) {
        push @wpkg_profiles, "maya";
      }

      if (/^tstaff$/) {
        push @wpkg_profiles, "tstaff";
      }

      if (/^afs$/) {
        push @wpkg_profiles, "afs";
      }

      if (/^fun$/) {
        push @wpkg_profiles, "fun";
      }

      if (/^research$/) {
        push @wpkg_profiles, "research";
        push @wpkg_profiles, "$os-research";
      }

      if (/^server$/) {
        push @wpkg_profiles, "server";
      }

      if (/^remote$/) {
        push @wpkg_profiles, "desktop";
        push @wpkg_profiles, "remote";
        push @wpkg_profiles, "$os-remote";
      }

      if (/^laptop$/) {
        push @wpkg_profiles, "$os-laptop";
      }

      if (/^laptop.loaner$/) {
        push @wpkg_profiles, "$os-laptop";
        push @wpkg_profiles, "loaner-laptop";
      }

      if (/^laptop.x61$/) {
        push @wpkg_profiles, "$os-laptop";
        push @wpkg_profiles, "x61";
      }

      # licensed software

      if (/^adobe-ae-pp$/) {
        push @wpkg_profiles, "adobe-ae-pp";
      }

      if (/^framemaker$/) {
        push @wpkg_profiles, "framemaker";
      }

      if (/^powerdvd$/) {
        push @wpkg_profiles, "powerdvd";
      }

    }

    next unless @wpkg_profiles;

    my $first_profile = shift(@wpkg_profiles);

    print OUT "  <host name=\"$hostname\" profile-id=\"$first_profile\">\n";
    foreach my $profile (@wpkg_profiles) {
      print OUT "    <profile id=\"$profile\" />\n";
    }
    print OUT "  </host>\n";
  }

  print OUT '</wpkg>', "\n";
  close(OUT);

  if ($dry_run) {
    print "DEBUG: wpkg-hosts: renaming temp file $PATH_TMPFILE to $file\n";
  } else {
    die "cdb-build: ERROR: Failed to rename $file: $!\n" if(!rename("$PATH_TMPFILE", "$file"));
  }

}

### 
### #
### # FUNCTION: setup_dns_db
### #    DESCR: Setup the temporary db file in which all other DNS entries are
### #           added.  Write the header information and any include entries.
### #
### sub setup_dns_db {
###   my($file, $include, $fh) = @_;
###   # Create temporary file for db - if dry_run, create in current directory
### 
###   my $db = $CDB_DNS_DIR . '/' . $file unless $dry_run;
###   my $dbinc = $CDB_INCLUDE_DIR . "/" . $include;
### 
###   # Set up headers of the db file
### 
###   build_dns_headers($db, $include, $fh) || die "cdb-build: aborting\n";
### 
###   # add the include file 
### 
###   if(-f("$dbinc")) {
###     open(DBINC, "<$dbinc") || die "cdb-build: ERROR: Failed to open $dbinc: $!\n";
###     while(<DBINC>) { print $fh $_; }
###     close(DBINC);
###   }
### }
### 
### #
### # FUNCTION: build_dns_headers
### #    DESCR: Creates the specified file, and adds the first specified header 
### #           lines from the old file to the new file.
### #
### 
### sub build_dns_headers {
###   my($file, $include, $handle) = @_;
###   my($line, $head, $tail, @nums, @inctext);
### 
###   print "building headers from: $file, $include\n" if ($verbose);
### 
###   # Open existing database file for reading.  If file doesn't exist, we
###   # assume this is an error.
### 
###   if (!open(FILE, $file)) {
###     warn "cdb-build: ERROR: Failed to open $file: $!\n";
###     return 0;
###   }
### 
###   # Print existing comments and blank lines to new file
### 
###   if (eof(FILE)) {
###     warn "cdb-build: ERROR: File $file is empty.\n";
###     return 0;
###   }
###  
### #  $line = <FILE>; 
### #  while ((($line =~ /^\s*$/) || ($line =~ /^;/)) && !eof(FILE)) {
### #    print $handle $line;
### #    $line = <FILE>;
### #  }
### 
###   # first line should be ttl line
###   $line = <FILE>; 
###   if (!($line =~ /ttl/)) {
###     warn "cdb-build: ERROR: $file does not being with ttl entry\n";
###     return 0;
###   }
### 
###   print $handle $line;
### 
### 
### #  close(FILE);
### 
###   # next line should be SOA entry
###   $line = <FILE>;
###   if (!($line =~ /SOA/)) {
###     warn "cdb-build: ERROR: $file does not begin with SOA entry\n";
###     return 0;
###   }
### 
###   # Retrieve serial number from SOA line
### 
###   ($head, $tail) = split(/\(/, $line);
###   @nums = split(/\s+/, $tail);
###   shift(@nums);
### 
###   # Recreate line and print it to file  
###            
###   $line = $head . '( ' . (shift(@nums) + 1);
###   while ($_ = shift(@nums)) {
###     $line .= " $_";
###   }
###   print $handle "$line\n";
### 
###   # retrieve the remainder of the header information, up to the ; EOH comment
###   while(<FILE>) {
###     print $handle $_;
###     last if /^\; EOH$/;
###   }
###   
###   # print out extra line
###   print $handle "\n";
### 
###   close(FILE);
### 
###   if(-s ("$include")) {
###     if (!open(INCLUDE, "<$include")) { 
###       warn "cdb-build: ERROR: Failed to open include $include: $!\n";
###       return 0;
###     }
### 
###     @inctext = <INCLUDE>;
###     print $handle @inctext;
###     close(INCLUDE);
###   }
###   
###   return 1;
### }
### 
### #
### # FUNCTION: build_dns
### #    DESCR: Creates the necessary dns-related files and reloads named
### #
### 
### sub build_dns {
###   my($db_header, $i, @dbfiles, $tmpfile, $handle, @handles, %indices, @aliases, 
###      $line, $spaces, $host, $cname, @nibbles, $subnet, $dbinc);
### 
###   my(%handles, $file, @files);
### 
###   # build headers for all the forward lookup maps
###   foreach my $db (@CDB_DNS_FWD_DBS) {
###     # specify the current source files
###     if ($dry_run) {
###       $db_header = 'db.';
###     } else {
###       $db_header = $CDB_DNS_DIR . '/db.';
###     }
###     my $srcfile = $db_header . $db;
###     my $srcinc = $CDB_INCLUDE_DIR . '/cdb_dns_' . $db . '.in';
### 
###     # open up a temporary file to house the new db info
###     $file = $db_header . $db;
### 
###     $handle = $db;
###     open($handle, ">$file.tmp") ||
###       die "cdb-build: ERROR: Failed to open $file: $!\n";
### 
###     push @files, $file;
###     $handles{$db} = $handle;
### 
###     build_dns_headers($srcfile, $srcinc, $handle);
###   }
### 
###   # build headers for all the reverse lookup maps
###   
###   # class C subnets first
###   foreach my $subnet (@cdb_classC_subnets) {
###     # specify the current source files
###     if ($dry_run) {
###       $db_header = "db.128.148.";
###     } else {
###       $db_header = $CDB_DNS_DIR . '/db.128.148.';
###     }
###     my $srcfile = $db_header . $subnet;
###     my $srcinc = $CDB_INCLUDE_DIR . '/cdb_dns_128.148.' . $subnet . '.in';
### 
###     # open up a temporary file to house the new db info
###     $file = $db_header . $subnet;
### 
###     $handle = $subnet;
###     open($handle, ">$file.tmp") ||
###       die "cdb-build: ERROR: Failed to open $file: $!\n";
### 
###     push @files, $file;
###     $handles{$subnet} = $handle;
### 
###     build_dns_headers($srcfile, $srcinc, $handle);
###   }
### 
###   # class B subnets next
###   foreach my $subnet (@cdb_classB_subnets) {
###     # specify the current source files
###     if ($dry_run) {
###       $db_header = "db.10.";
###     } else {
###       $db_header = $CDB_DNS_DIR . '/db.10.';
###     }
###     my $srcfile = $db_header . $subnet;
###     my $srcinc = $CDB_INCLUDE_DIR . '/cdb_dns_128.148.' . $subnet . '.in';
### 
###     # open up a temporary file to house the new db info
###     $file = $db_header . $subnet;
### 
###     $handle = $subnet;
###     open($handle, ">$file.tmp") ||
###       die "cdb-build: ERROR: Failed to open $file: $!\n";
### 
###     push @files, $file;
###     $handles{$subnet} = $handle;
### 
###     build_dns_headers($srcfile, $srcinc, $handle);
###   }
### 
###   foreach my $host (keys(%$cdb_by_hostname)) {
###     my($prim_grp) = $cdb_by_hostname->{$host}{'prim_grp'};
### 
###     # TODO Don't add DNS entries for dynamic hosts
### 
###     # only include hosts that are listed as active or monitored
###     my $status = $cdb_by_hostname->{$host}{'status'};
###     next unless ( $status eq "active" || $status eq "monitored" || $status eq "ugrad-monitored" );
### 
###     # first write out to forward tables
###     if ("$prim_grp" eq "ilab") {
###       $handle = $handles{$prim_grp};
###     } else {
###       $handle = $handles{'cs'};
###     }
### 
###     $spaces = ' ' x (21 - length($host));
###     $line = $host . $spaces . "IN  A     " .  
###       $cdb_by_hostname->{$host}{'ip_addr'};
###     print $handle "$line\n";
### 
###     if ($cdb_by_hostname->{$host}{'aliases'} ne '') {
###       @aliases = split(/,/, $cdb_by_hostname->{$host}{'aliases'});
###       while ($cname = pop(@aliases)) {
###         $spaces = ' ' x (21 - length($cname));
###         if ("$prim_grp" eq "ilab") {
###           $line = $cname . $spaces . "IN  CNAME " . "${host}.ilab.${CDB_DNS_DOMAIN}.";
###         } else {
###           $line = $cname . $spaces . "IN  CNAME " . "${host}.${CDB_DNS_DOMAIN}.";
###         }
###         print $handle "$line\n";
###       }
###     }
### 
###     if ($cdb_by_hostname->{$host}{'mxhost'} ne '') {
###       $spaces = ' ' x (21 - length($host));
###       $line = $host . $spaces . "IN  MX    $CDB_DNS_MXPREF " . 
###         $cdb_by_hostname->{$host}{'mxhost'} . ".";
###       print $handle "$line\n";
###     }
### 
###     # Then the appropriate subnet database
### 
###     @nibbles = split(/\./, $cdb_by_hostname->{$host}{'ip_addr'});
###     if (grep /$nibbles[1]/, @cdb_classB_subnets) {
###       $subnet = $nibbles[1];
###     } elsif (grep /$nibbles[2]/, @cdb_classC_subnets) {
###       $subnet = $nibbles[2];
###     }
### 
###     $line = "";
###     foreach (reverse(@nibbles)) {
###       $line .= "${_}.";
###     }
### 
###     $spaces = ' ' x (18 - length($cdb_by_hostname->{$host}{'ip_addr'}));
###     if ("$prim_grp" eq "ilab") {
###       $line .= "IN-ADDR.ARPA." . $spaces . "IN  PTR   " .
###              "${host}.ilab.${CDB_DNS_DOMAIN}.";
###     } else {
###       $line .= "IN-ADDR.ARPA." . $spaces . "IN  PTR   " .
###              "${host}.${CDB_DNS_DOMAIN}.";
###     }
### 
###     if (defined($handles{$subnet})) {  
###       $handle = $handles{$subnet};
###       print $handle "$line\n";
###     }
###   }
### 
###   foreach my $handle (keys %handles) {
###     close($handle);
###   }
### 
###   foreach my $file (@files) {
###     die "cdb-build: ERROR: Failed to rename $file.tmp: $!\n"
###       if (!rename("$file.tmp", $file));
### 
###     # fix permissions the file
###     chown((getpwnam($CDB_MAP_OWNER))[2],
###           (getgrnam($CDB_MAP_GROUP))[2], $file) ||
###              warn "cdb-build: WARNING: Failed to chown $file: $!\n";
### 
###     chmod($CDB_MAP_PERMS, $file) ||
###       warn "cdb-build: WARNING: Failed to chmod $file: $!\n";
###   }
### 
###   foreach my $host (@CDB_DNS_SERVERS) {
###     maybe_system('scp', '-pq', @files, "$host:/var/cache/bind");
###     if ( $? != 0 ) {
###       warn "cdb-build: ERROR: Failed to copy DNS files to $host\n";
###     }
### 
###     maybe_system('ssh', '-x', $host, '/usr/sbin/rndc reload');
###     if ( $? != 0 ) {
###         warn "cdb-build: ERROR: Failed to send DNS reload command to on $host\n";
###     }
###   }
### 
### }
### 

sub build_ypmake {

  my $cmd;

  if($verbose) {
    $cmd = "/u/system/bin/ypmake";
  } else {
    $cmd = "/u/system/bin/ypmake >/dev/null"
  }

  maybe_system($cmd);

}

