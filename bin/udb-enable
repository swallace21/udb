#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use NetAddr::IP;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);
use BrownCS::udb::Net qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
  'n|dryrun' => \$dryrun,
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);

if (not $dryrun) {
  if (!BrownCS::udb::Util::okay_tstaff || !BrownCS::udb::Util::okay_adminhost) {
    print "Insufficient privileges - check your warnings.\n";
    exit;
  }
}

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;
my $verified = 0;
($verified, $name) = verify_device_name($udb)->($name, $verbose);
unless ($verified) { die "ERROR: device name contains illegal characters\n" };

my $rs;
eval {
  $rs = $udb->txn_do(sub {

      # are we creating or reusing?

      my $device = $udb->resultset('Devices')->find_or_new({
          device_name => $name,
          place_id => undef,
        });
      if ($device->status and ($device->status->equip_status_type ne "spare")) {
        die "Device $name is already active.\n";
      }

      print <<'EOF';
-----------------------------------------------------------
Note: If any of the following are true:

  - The device is a switch
  - The device has more than one network card
  - The device will have more than one IP address
  - The device will be a virtual host
  - The device's domain name is not 'cs.brown.edu' (e.g. ilab)

then you need to edit this device manually after running
this script.
-----------------------------------------------------------
EOF

      #
      # fields that apply to all devices
      #

      $device->usage($uc->get_equip_usage_type($device->usage));

      if ($device->usage->tracked) {
        $device->manager($uc->get_management_type($device->manager));
      } else {
        $device->manager('user');
      }

      $device->contact($uc->get_contact($device->contact));

      if ($device->usage->tracked) {
        my $owner;
        if ($device->manager->management_type =~ /tstaff/) {
          $owner = "dept"; 
        } else {
          $owner = $device->contact;
        }
        $device->owner($uc->get_owner($device->owner or $owner));
      } else {
        $device->owner($device->contact);
      }

      # if this a device tstaff tracks, then gather pertinent information
      if ($device->usage->tracked) {
        $device->serial_num($uc->get_serial_num($device->serial_num));
        $device->brown_inv_num($uc->get_brown_inv_num($device->brown_inv_num));
        $device->po_num($uc->get_po_num($device->po_num));
      }

      # if this is a new machine, it won't have a status, but needs one to 
      # satisfy db constraints.  Don't touch the status yet, if it's an existing
      # machine
      if (! $device->status) {
        $device->status('deployed');
      }

      $device->update_or_insert;

      #
      # location
      #

      if ($device->usage->tracked) {
        my ($city, $building, $room,$description) = $uc->get_place($device->place);

        my $loc = $udb->resultset('Places')->find_or_create({
            city => $city,
            building => $building,
            room => $room,
            description => $description,
          });

        $device->place($loc);
      }

      #
      # network-specific
      #

      my $is_networked = $uc->confirm("\nIs this a networked device? (Y/n)", "y");
      if ($is_networked) {

        # check to see if there are existing network interfaces for this device.  This
        # should only happen if the device was set to be spare.
        my $iface = $device->net_interfaces->single;
        if ($iface && $device->status->equip_status_type ne "spare") {
          print "Error: an active device interface already exists and shouldn't, contact";
          print "someone from the software group\n";
          exit 1;
        }

        # get ip address and mac address information from the user
        my ($ipaddr, $vlan) = $uc->get_ip_and_vlan(1);
        
        my $mac_addr = $uc->get_mac($iface);

        # if necessary, create an interface associated with this mac address
        if (! $iface) {
          $iface = $device->add_to_net_interfaces({
            device => $device,
            ethernet => $mac_addr,
          });
        }

        # associate the ip address and vlan with the interface
        my $addr = $udb->resultset('NetAddresses')->create({
            vlan => $vlan,
            ipaddr => $ipaddr,
            monitored => 0,
          });

        $addr->add_to_net_interfaces($iface);

        $iface->update({
            primary_address => $addr,
        });

        if(! dynamic_vlan($udb, $vlan->vlan_num)) {
          # get port information from the user
          my $port;
          ($port,$iface) = $uc->get_port($iface);
  
          # it's possible, if there was a conflict, that the addr could have changed
          # make sure we are still referencing the correct addr
          $addr = $udb->resultset('NetAddresses')->find($iface->primary_address_id);

          # associate port information with interface
          if ($port) {
            $iface->net_port($port);
            $iface->update;
          } 

          dns_insert($udb, $name, 'cs.brown.edu', $addr, 1);

          if ($port and (! grep { $_ = $vlan } $port->net_vlans)) {
            $port->add_to_net_vlans($vlan);
          }
        }
      }

      #
      # computer-specific
      #

      if ($device->usage->tracked) {
        my $is_comp = 0;
        if ($device->computer) {
          $is_comp = 1;
        } else {
          $is_comp = $uc->confirm("\nIs this device a computer? (Y/n)", "y");
        }
        if ($is_comp) {
          $device->computer($udb->resultset('Computers')->find_or_new({device_name => $name}));
          $device->comp_sysinfo($udb->resultset('CompSysinfo')->find_or_new({device_name => $name}));
  
          my $comp = $device->computer;
  
          $comp->os_type($uc->get_os_type($comp->os_type));
          $comp->update_or_insert;
  
          my @classes = $comp->comp_classes->get_column("name")->all;
          my $classes_ref = $uc->get_comp_classes(@classes);
          if ($classes_ref) {
            foreach (@$classes_ref) {
              my $class = $udb->resultset('CompClasses')->find_or_create({
                  name => $_,
                  os_type => $comp->os_type,
                });
              $comp->add_to_comp_classes($class);
            }
          }
  
          $comp->update_or_insert;
          $device->comp_sysinfo->update_or_insert;
        }
      }
  
      #
      # any additional comments
      #

      $device->comments($uc->get_comments($device->comments));

      #
      # we have all the information, flag it as deployed
      #
      $device->status('deployed');
      $device->update_or_insert;

    });
};
if ($@) {
  die <<EOF;
Failed to enable $name. Try again.

Details:
  $@
EOF
}

__END__

=head1 NAME

udb-enable - Deploy a device in UDB

=head1 SYNOPSIS

udb-enable <device>

=head1 DESCRIPTION

deploys a device to the database

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=item B<-n>, B<--dryrun>

Don't make changes.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

