#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use NetAddr::IP;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
  'n|dryrun' => \$dryrun,
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

my $device = $udb->resultset('Devices')->find($name);
die "Device $name does not exist.\n" if not $device;
die "Device $name is already enabled.\n" if ($device->status->equip_status_type ne "spare");

my $comp = $device->computer;
die "Device $name is not a computer.\n" if not $comp;

my $iface = $device->net_interfaces->single;

my @classes = $comp->comp_classes->get_column("name")->all;

print <<'EOF';
-----------------------------------------------------------
This script assumes that you are enabling a standard computer.
If any of the following are true:

  - The device is a printer/switch/etc., not a computer
  - The device has more than one network card
  - The device will have more than one IP address
  - The device will be a server
  - The device will be a virtual host
  - The device will not located inside the CIT
  - The device's domain name is not 'cs.brown.edu' (e.g. ilab)

then you need to use a different interface.
-----------------------------------------------------------
EOF

my $managed_by = $uc->get_management_type($device->manager->management_type);
my $equip_usage_type = $uc->get_equip_usage_type($device->usage->equip_usage_type);
my $os = $uc->get_os_type($device->computer->os_type->os_type);
my $classes = $uc->get_comp_classes(@classes);
my ($ipaddr, $vlan) = $uc->get_ip_and_vlan;
my $port = $uc->get_port;
my $room = $uc->get_room($device->place->room);
my $contact = $uc->get_contact($device->contact);
my $comments = $uc->get_comments($device->comments);

my $rs;
eval {
  $rs = $udb->txn_do(sub {

      my $loc = $udb->resultset('Places')->find_or_create({
          city => 'Providence',
          building => 'CIT',
          room => $room,
        });

      $device->update({
          manager => $managed_by,
          status => 'deployed',
          usage => $equip_usage_type,
          contact => $contact,
          place => $loc,
          comments => $comments,
        });

      if ($classes) {
        foreach (@$classes) {
          my $class = $udb->resultset('CompClasses')->find_or_create({
              name => $_,
              os_type => $os,
            });
          $comp->add_to_comp_classes($class);
        }
      }

      my $addr = $udb->resultset('NetAddresses')->create({
          vlan => $vlan,
          ipaddr => $ipaddr,
          monitored => 0,
        });

      dns_insert_both($name, 'cs.brown.edu', $addr, 1);

      if ($port) {
        $iface->net_port($port);
        $iface->update;
      }

      $addr->add_to_net_interfaces($iface);

      $iface->update({
          primary_address => $addr,
        });

#  foreach my $vlan_num (@vlans) {
#    print "bind port $wall_plate to vlan $vlan_num\n";
#    my $vlan = $udb->resultset('NetVlans')->find($vlan_num);
#    $port->add_to_net_vlans($vlan);
#  }

      #switchport

    });
};
if ($@) {
  die <<EOF;
Failed to enable $name. Try again.

Details:
  $@
EOF
}

sub dns_insert {
  my ($a, $b, $c, $d, $e) = @_;
  $udb->resultset('NetDnsEntries')->find_or_create({
      dns_name => $a,
      domain => $b,
      net_address => $c,
      authoritative => $d,
      dns_region => $e,
    });
}

sub dns_insert_both {
  my ($a, $b, $c, $d) = @_;
  dns_insert($a, $b, $c, $d, "internal");
  dns_insert($a, $b, $c, $d, "external");
}

__END__

=head1 NAME

udb-enable - Add a device to UDB

=head1 SYNOPSIS

udb-enable <device>

=head1 DESCRIPTION

adds a device to the database

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

