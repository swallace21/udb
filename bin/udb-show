#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::UDB;
use BrownCS::UDB::Util qw(:all);
use BrownCS::UDB::View qw(print_record format_device format_address);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;
my $username = $ENV{'USER'};
my $view = 'all';

GetOptions ('help|h|?' => \$help, 
            'v|verbose' => \$verbose,
            'n|dryrun' => \$dryrun,
            'm|view-mode=s' => \$view,
            'u|username=s' => \$username) or usage(1);
usage(0) if $help;

my $udb = BrownCS::UDB->new;
$udb->start($username);

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

my $device = $udb->db->resultset('Equipment')->find($name);
if ($device) {
  print_record('', format_device($device));
  exit(0);
}

warn "No device matching found matching $name. Trying heuristics.\n";

my @candidate_devices = ();
my @candidate_addresses = ();

# device with name LIKE what we're looking for
my $device_rs = $udb->db->resultset('Equipment')->search({
    name => { '~*' => $name },
  });
if ($device_rs) {
  while ($device = $device_rs->next) {
    push @candidate_devices, $device;
  }
}

my $dns_rs = $udb->db->resultset('NetDnsEntries')->search({
    dns_name => { '~*' => $name },
    dns_region => 'internal',
  });
if ($dns_rs) {
  while (my $dns = $dns_rs->next) {
    my $address = $dns->address;
    my $interface_rs = $address->net_interfaces;
    if ($interface_rs->count) {
      while (my $interface = $interface_rs->next) {
        my $device = $interface->device;
        push @candidate_devices, $device;
      }
    } else {
      push @candidate_addresses, $address;
    }
  }
}

my %seen_devices = ();
foreach my $device (@candidate_devices) {
  if (not $seen_devices{$device->name}) {
    $seen_devices{$device->name} = 1;
    print "\n";
    print_record('', format_device($device));
  }
}

if (%seen_devices) {
  exit(0);
}

my %seen_addresses = ();
foreach my $address (@candidate_addresses) {
  if (not $seen_addresses{$address->id}) {
    $seen_addresses{$address->id} = 1;
    print "\n";
    print_record('', format_address($address));
  }
}

if (%seen_addresses) {
  exit(0);
}

die "Couldn't find anything matching $name.\n";

__END__

=head1 NAME

udb-show - Print out information about a device

=head1 SYNOPSIS

udb-show [-u <username>] [-m <view-mode>] <device>

=head1 DESCRIPTION

udb-show queries the UDB database for information about a piece of
equipment, and prints it out to the console. It is designed to resemble
the old I<cdb profile> or I<index pc> commands.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-u>, B<--username>=user

Logs onto the database server as the specified username, instead of as
the current user.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

