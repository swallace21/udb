#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console;
use BrownCS::udb::DeviceHash;

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;

GetOptions (
  'help|h|?' => \$help, 
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console (udb => $udb);
my $udh = new BrownCS::udb::DeviceHash(udb => $udb);

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;
my $device;
my $device_rs;

$device_rs = $udb->resultset('Devices')->search({
    device_name => { '=' => $name },
    status => {'!=' => 'deleted'},
  });
if ($device_rs) {
  $device = $device_rs->next;
  if ($device) {
    $uc->print_record('', $udh->format_device($device));
    exit(0);
  }
}

warn "No device matching found matching $name. Trying heuristics.\n";

my @candidate_devices = ();
my @candidate_addresses = ();

# device with name LIKE what we're looking for
$device_rs = $udb->resultset('Devices')->search({
    device_name => { '~*' => $name },
    status => {'!=' => 'deleted'},
  });
if ($device_rs) {
  while (my $device = $device_rs->next) {
    push @candidate_devices, $device;
  }
}

my $dns_rs = $udb->resultset('NetDnsEntries')->search({
    -and => [
      dns_name => { '~*' => $name },
      -or => [
        dns_region => 'internal',
        dns_region => 'all',
      ],
    ],
  });
if ($dns_rs) {
  while (my $dns = $dns_rs->next) {
    my $address = $dns->net_address;
    my $interface_rs = $address->net_interfaces;
    if ($interface_rs->count) {
      while (my $interface = $interface_rs->next) {
        my $device = $interface->device;
        push @candidate_devices, $device;
      }
    } else {
      push @candidate_addresses, $address;
    }
  }
}

my %seen_devices = ();
foreach my $device (@candidate_devices) {
  if (not $seen_devices{$device->device_name}) {
    $seen_devices{$device->device_name} = 1;
    print "\n";
    $uc->print_record('', $udh->format_device($device));
  }
}

if (%seen_devices) {
  exit(0);
}

my %seen_addresses = ();
foreach my $address (@candidate_addresses) {
  if (not $seen_addresses{$address->id}) {
    $seen_addresses{$address->id} = 1;
    print "\n";
    $uc->print_record('', $udh->format_address($address));
  }
}

if (%seen_addresses) {
  exit(0);
}

die "Couldn't find anything matching $name.\n";

__END__

=head1 NAME

udb-show - Print out information about a device

=head1 SYNOPSIS

udb-show <device>

=head1 DESCRIPTION

udb-show queries the UDB database for information about a device,
and prints it out to the console. It is designed to resemble
the old I<cdb profile> or I<index pc> commands.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=back

=head1 AUTHORS

Aleks Bromfield.
Mark Dieterich.

=head1 SEE ALSO

B<udb>

=cut

