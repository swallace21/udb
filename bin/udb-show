#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use YAML::Tiny qw(Dump);
use Data::Dumper;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::UDB;
use BrownCS::UDB::Util qw(:all);
use BrownCS::UDB::View qw(filter_record);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;
my $username = $ENV{'USER'};
my $view = 'all';

GetOptions ('help|h|?' => \$help, 
            'v|verbose' => \$verbose,
            'n|dryrun' => \$dryrun,
            'm|view-mode=s' => \$view,
            'u|username=s' => \$username) or usage(1);
usage(0) if $help;

my $udb = BrownCS::UDB->new;
$udb->start($username);

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

my $device = $udb->db->resultset('Equipment')->find($name);
die "No record for device $name.\n" if not $device;

print Dumper($device->get_columns);

printf("Name: %s\n", $device->name);
print Dump(filter_record($view, $device));

__END__

=head1 NAME

udb-show - Print out information about a device

=head1 SYNOPSIS

udb-show [-u <username>] [-m <view-mode>] <device>

=head1 DESCRIPTION

udb-show queries the UDB database for information about a piece of
equipment, and prints it out to the console. It is designed to resemble
the old I<cdb profile> or I<index pc> commands.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-u>, B<--username>=user

Logs onto the database server as the specified username, instead of as
the current user.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

