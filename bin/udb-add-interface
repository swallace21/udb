#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);
use BrownCS::udb::Net qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;

GetOptions (
  'help|h|?' => \$help, 
) or usage(1);
usage(0) if $help;

if (@ARGV < 0 || @ARGV > 1) {
  usage(2);
}

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;
my $device = $udb->resultset('Devices')->find($name);

if (! $device) {
    die "No record for device named \"$name\".\n";
}

my $rs;
eval {
  $rs = $udb->txn_do(sub {
    my ($ipaddr, $vlan);

    # get information about current device interfaces
    my $iface_rs = $device->net_interfaces;
    
    my $mac_addr;
    if (! virtual_device($device)) {
      $mac_addr = $uc->get_mac();
    }

    if (! $iface_rs->count || $uc->confirm("Do you want to associate a new IP address with this interface (y/n)?")) {
      my $iface = $device->add_to_net_interfaces({
        device => $device,
        ethernet => $mac_addr,
      });
      
      ($ipaddr, $vlan) = $uc->get_ip_and_vlan(1);

      # create a new network address
      my $addr = $udb->resultset('NetAddresses')->create({
        vlan => $vlan,
        ipaddr => $ipaddr,
        monitored => 0,
      });

      $addr->add_to_net_interfaces($iface);

      # if this device doesn't have a primary interface defined, then 
      # assume this will be the devices primary interface
      my $primary_iface_rs = $udb->resultset('NetInterfaces')->search({
        device_name => $name,
        primary_address_id => { '!=' => undef },
      });

      if (! $primary_iface_rs->count) {
        $iface->update({
          primary_address => $addr,
        });
      }

      if ($ipaddr) { 
        dns_insert($udb, $name, 'cs.brown.edu', $addr, 1);

        # If the device is not virtual, then it must be associated with a switch port
        if (! virtual_device($device)) {
          my $port;
          ($port,$iface) = $uc->get_port($iface);
          if ($port) {
            $iface->net_port($port);
            $iface->update;
          }
        }
      }
    } else {
      print "\n----------------------- WARNING ---------------------------\n";
      print "This requires that the switch and device be configured to support\n";
      print "bonded interfaces.  At the moment, udb does not take care of\n";
      print "configuring the network switch, so this must be configured in advance\n";
      print "Please talk with someone in the software group if you aren't sure what\n";
      print "this means before continuing.\n";
      print "------------------------------------------------------------\n";
      if (!$uc->confirm("Are you sure you want to continue? (y/N)", "no")) {
        exit (0);
      }

      my $existing_iface = $uc->choose_interface($name);

      # create the new interface
      my $iface = $device->add_to_net_interfaces({
        device => $device,
        ethernet => $mac_addr,
      });
      
      # associate network port with this interface
      my $port;
      ($port,$iface) = $uc->get_port($iface);
      if ($port) {
        $iface->net_port($port);
        $iface->update;
      }

      # associate existing ip addresses with this new network interface
      my $addrs_rs = $existing_iface->net_addresses;
      while (my $addr = $addrs_rs->next) {
        $addr->add_to_net_interfaces($iface);
      }
    }
  });
};
if ($@) {
  die <<EOF;
Operation failed. Details:
  $@
EOF
}

__END__

=head1 NAME

udb-add-interface - Adds a new network interface to a device

=head1 SYNOPSIS

udb-add-interface <device>

=head1 DESCRIPTION

udb-add-interface allows a user to add a network interface to an existing
device.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=back

=head1 AUTHORS

Mark Dieterich.

=head1 SEE ALSO

B<udb>

=cut

