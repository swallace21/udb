#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;

sub vprint {
  my ($msg) = @_;
  if ($verbose) {
    print $msg, "\n";
  }
}

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
  'n|dryrun' => \$dryrun,
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);

if (not $dryrun) {
  if (not BrownCS::udb::Util::okay_tstaff){
    print "Insufficient privileges - check your warnings.\n";
    exit;
  }
}

if (@ARGV < 1) {
  usage(2);
}

my @dns_names = @ARGV;
my $rs;

eval {
  $rs = $udb->txn_do(sub {
    foreach my $name (@dns_names) {
      my @addrs;

      # check to see whether this name is associated with a device
      # if so, get associated addresses
      my $device = $udb->resultset('Devices')->find($name);
      if ($device) {
        my $iface_rs = $device->net_interfaces;
        foreach (my $iface = $iface_rs->next) {
          my $addr_rs = $iface->net_addresses;
          foreach (my $addr = $addr_rs->next) {
            push @addrs, $addr;
          }
        }
      } elsif (my $dns_entry = $udb->resultset('NetDnsEntries')->search({dns_name => $name,})->single) {
        push @addrs, $dns_entry->net_address; 
      }

      if (! @addrs) {
        print "No addresses associated with device or DNS name: $name\n";
        next;
      }
    
      if($dryrun){
        print "Dry run finished...\n";
        exit;
      }

      if (@addrs == 1 && ! $addrs[0]->ipaddr) {
        print "No static IP addresses associated with device or DNS name: $name\n";
        next;
      }
    
      print "The current addresses are associated with $name:\n\n";
      foreach my $addr (@addrs) {
        if ($addr->ipaddr) {
          my $iface = $addr->net_interfaces->single;
          my $hostname;
          if ($iface) {
            $hostname = $iface->device_name;
          } else {
            $hostname = $name;
          }
          print "$hostname (" . $addr->ipaddr . "):\n";
          my $monitored = $uc->confirm("Should this interface/DNS name be monitored? (Y/n)", "y");
          my $notification = 0;
          if ($monitored) {
            $notification = $uc->confirm("Should nagios notify Tstaff? (y/N)", "n");
          } else {
            $notification = 0;
          }

          $addr->update({
            monitored => $monitored,
            notification => $notification,
          });
        }
      }
    }
  });
};
if ($@) {
  die <<EOF;
Failed to update one or more names. Try again.

Details:
  $@
EOF
}

__END__

=head1 NAME

udb-monitoring - Modifies the monitoring settings associated with a dns or host name

=head1 SYNOPSIS

udb-monitoring <dns name|hostname>

=head1 DESCRIPTION

Change the monitoring settings for one or more dns or host names

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=back

=head1 AUTHORS

Mark Dieterich.

=head1 SEE ALSO

B<udb>

=cut

