#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);
use BrownCS::udb::DeviceHash;
use BrownCS::udb::Switch;
use BrownCS::udb::Build;

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;
my $yes = 0;

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
  'n|dryrun' => \$dryrun,
  'y|yes' => \$yes,
) or usage(1);
usage(0) if $help;

my $build = (not $dryrun);

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);
my $udh = new BrownCS::udb::DeviceHash(udb => $udb);
my $ub = new BrownCS::udb::Build(udb => $udb, verbose => $verbose, dryrun => $dryrun);

if (not $dryrun) {
  if (!BrownCS::udb::Util::okay_tstaff || !BrownCS::udb::Util::okay_adminhost) {
    print "Insufficient privileges - check your warnings.\n";
    exit;
  }
}

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

# first try a wall plate number
my @ports = $udb->resultset('NetPorts')->search({
    wall_plate => { '~*', $name},
  });

# if no result, search on device name
unless(@ports) {
	my $device = $udb->resultset('Devices')->find($name);
	if ($device) {
    if ($device->status && $device->status->equip_status_type eq 'spare') {
      exit(0);
    }
		my $ifaces = $device->net_interfaces;
		while (my $iface = $ifaces->next) {
			push @ports, $iface->net_port;
		}
	}
}

die "No record for wall plate or device name \"$name\".\n" unless(@ports);

my %switches = ();

foreach my $port (@ports) {

  my $net_switch = $port->net_switch;
  my $switch_name = $net_switch->device_name;

  my $switch = $switches{$switch_name};
  if (not $switch) {
    $switches{$switch_name} = BrownCS::udb::Switch->new({
        net_switch => $net_switch,
        verbose => $verbose,
      });
    $switch = $switches{$switch_name}
  }

  my $port_record = $udh->format_port($port);
  my ($native_vlan, @other_vlans) = $switch->get_port_vlans($port);
  if (@other_vlans) {
    $port_record->{"Trunking"} = "on";
    $port_record->{"Native VLAN"} = $native_vlan;
    $port_record->{"Other VLANs"} = \@other_vlans;
  } else {
    $port_record->{"Trunking"} = "off";
    $port_record->{"VLAN"} = $native_vlan;
  }
  print "\n";
  $uc->print_record('', $port_record);
}
print "\n";

if ($dryrun or (not $build)) {
  print "Dry run finished...\n";
  exit(0);
}

if ($yes || $uc->confirm("Are you sure you want to reset these ports? (Y/n)", "yes")) {

  foreach my $switch (values(%switches)) {
    $switch->connect;
  }

  foreach my $port (@ports) {
    my $net_switch = $port->net_switch;
    my $switch_name = $net_switch->device_name;
    my $switch = $switches{$switch_name};
    $switch->update_port($port);
  }
}

exit(0)

__END__

=head1 NAME

udb-reset-port - Reset the switch configuration of a port

=head1 SYNOPSIS

udb-reset-port <wall plate|device name>

=head1 DESCRIPTION

Perform maintenance on an existing device record in UDB.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=item B<-y>, B<--yes>

Don't prompt for a confirmation.

=back

=head1 AUTHORS

Aleks Bromfield, Mark Dieterich.

=head1 SEE ALSO

B<udb>

=cut

