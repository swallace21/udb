#!/usr/bin/perl

use strict;
use warnings;

use File::stat;
use Time::localtime;

# paths
my $base_path = "/tstaff/projects/sysinfo";
my $linux_data_path = "${base_path}/linuxdata";
my $win_data_path = "${base_path}/windata";
my $old_data_path = "${base_path}/olddata";
# this is written such that this path could be changed
my $data_path = "${base_path}/data";
my $manual_db = "/u/system/admin/inventory/pc.db";
my $auto_db = "/u/system/admin/inventory/comp.db";
my $missing_hosts = "/u/system/admin/inventory/missing_from_pc.txt";

# commands
my $cat = '/bin/cat';
my $ls = '/bin/ls';
my $dos2unix = '/usr/bin/dos2unix';
my $index = '/local/bin/index';
my $cp = '/bin/cp';
my $rm = '/bin/rm';
my $mv = '/bin/mv';
my $echo = '/bin/echo';
my $grep = '/bin/grep';

# sleep for five minutes because this script is getting run at the exact same
# time that the machines in the department are writing to the files and
# directories that this script is reading from.
sleep(300);

# list of files
my @db_data_list = `${ls} -1 ${data_path}`;
my @linux_data_list = `${ls} -1 ${linux_data_path}`;
my @win_data_list = `${ls} -1 ${win_data_path}`; 

# merge all files together
my @data_list = (@db_data_list, @linux_data_list, @win_data_list);

my %data_hash = ();
my $file;

# store files as keys in hash
foreach $file (@data_list) {
  chomp($file);
  $data_hash{$file} = "";
}

# file list is unique list of keys
@data_list = (keys(%data_hash));

# update the db file handling windows files, duplicates, and hosts not in
# Kathy's db

foreach $file (@data_list) {
  # test for which data exist
  my $linux_data_exists = -e "${linux_data_path}/${file}";
  my $win_data_exists = -e "${win_data_path}/${file}";

  # if both linux and windows data exist
  if ($linux_data_exists && $win_data_exists) {
    # if the windows file was modified more recently
    if (stat("${linux_data_path}/${file}")->mtime < stat("${win_data_path}/$file")->mtime) {
      # copy to main data directory
      `${cp} ${win_data_path}/${file} ${data_path}/${file}`;
      # convert format
      `${dos2unix} ${data_path}/${file}`;
    }
    # if the linux data file was modified more recently
    else {
      # copy to main data directory
      `${cp} ${linux_data_path}/${file} ${data_path}/${file}`;
    }

    sub_check_manual_db($file, "${win_data_path}","${linux_data_path}");
  }
  # if only linux data
  elsif ($linux_data_exists) {
    # copy to main data directory
    `$cp ${linux_data_path}/${file} ${data_path}/${file}`;

    sub_check_manual_db($file, "${linux_data_path}");
  }
  # if only windows data
  elsif ($win_data_exists) {
    # convert format
    chomp($file);
    # copy to main data directory
    `${cp} ${win_data_path}/${file} ${data_path}/${file}`;
    #convert format
    `${dos2unix} ${data_path}/${file}`;

    sub_check_manual_db($file, "${win_data_path}");
  }
  # if only database entry
  else {
    sub_check_manual_db($file);
  }
}

# cat together files for database file
`${cat} ${data_path}/* > ${auto_db}`;
`${base_path}/scripts/sysinfo_man_vs_auto`;

## END PROGRAM

# checks hostname against manual database and moves necessary files
sub sub_check_manual_db($@) {
  my $file = @_[0];
  my @file_locations = ();
  if (@_ > 1) {
    @file_locations = @_[1];
  }

  # if the host is not in kathy's db (returns empty string)
  if (`${index} -s 1 ${manual_db} ${file}` eq "") {
    # remove data files
    my $location;
    foreach $location (@file_locations) {
      `${rm} ${location}/${file}`;
    }

    # mv main file to the old data directory
    if (-e "${data_path}/${file}") {
      `${mv} ${data_path}/${file} ${old_data_path}/${file}`;
    }

    if (`${grep} -w ${file} ${missing_hosts}` eq "") {
      # append to list of missing hosts 
      `${echo} ${file} >> ${missing_hosts}`;
    }
  }
}

__END__

=head1 NAME

genSysInfoDB - generate the sysinfo db

=head1 SYNOPSIS

genSysInfoDB

=head1 DESCRIPTION

B<genSysInfoDB> takes data files generated by nodes on the cs network
containing basic system information in an "index db" format and combines
them into a db file. Each file is named after the host that it was
created by and is stored in a directory of either linux or windows data
files. To keep consistency, data files are compared with a manual
database of pcs maintained by kpk. If the host is not present in the
database, its entries are removed with a copy being placed in an
"olddata" directory and its name written to a list of missing hosts.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-u>, B<--username>=user

Logs onto the database server as the specified username, instead of as
the current user.

=item B<-v>, B<--verbose>

Print lots of information about what udb is doing.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=back

=head1 AUTHORS

Mark Humphrey and Aleks Bromfield.

=cut

