#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Console qw(:all);
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Net qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
  'n|dryrun' => \$dryrun,
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);

if (not $dryrun) {
  if (not BrownCS::udb::Util::okay_tstaff) {
    print "Insufficient privileges - check your warnings.\n";
    exit;
  }
}

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

my $device = $udb->resultset('Devices')->find($name);
die "No record for device $name.\n" if not $device;

if ($dryrun) {
  print "Dry run finished...\n";
  exit;
}

my $rs;
eval {
  $rs = $udb->txn_do(sub {
    if ($device->status && $device->status->equip_status_type eq 'deleted') {
      die "ERROR: Device is marked for deletion, please run udb build\n";
    }

    my ($city, $building, $room,$description) = $uc->get_place($device->place);

    my $new_place = $udb->resultset('Places')->find_or_create({
      city => $city,
      building => $building,
      room => $room,
      description => $description,
    });

    $device->place($new_place);
    $device->update;

    if ($device->status && $device->status->equip_status_type ne 'spare') {
      if ($device->place->building eq 'CIT') {
        my $iface_rs = $device->net_interfaces;
        while (my $iface = $iface_rs->next) {
          my $addr_rs = $iface->net_addresses;
          my $dynamic = 1;
          while (my $addr = $addr_rs->next) {
            if (! dynamic_vlan($udb, $addr->vlan_num)) {
              $dynamic = 0;
            }
          }
          
          if (! $dynamic) {
            my $port;
            ($port, $iface) = $uc->get_port($iface);
            if ($port) {
              $iface->net_port($port);
              $iface->update;
            }
          }
        }
      } else {
        if ($device->net_interfaces) {
          my $iface_rs = $device->net_interfaces;
          while (my $iface = $iface_rs->next) {
            my $ip_rs = $iface->net_addresses;
            while (my $ip = $ip_rs->next) {
              $ip->delete;
            }
            $iface->net_port(undef);
            $iface->update;
          }
        }
      }
    }
  });
};
if ($@) {
  die <<EOF;
Operation failed. Details:
  $@
EOF
}

# reset the port in question, to ensure switch has updates
system("$RealBin/udb-reset-port $name");

__END__

=head1 NAME

udb-move - Perform maintenance on an existing device record in UDB

=head1 SYNOPSIS

udb-move <device>

=head1 DESCRIPTION

Perform maintenance on an existing device record in UDB.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

