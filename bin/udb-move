#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);

if (not $dryrun) {
  use BrownCS::udb::Build;
  my $ub = new BrownCS::udb::Build(udb => $udb, verbose => $verbose, dryrun => $dryrun);
  $ub->okay_to_build;
}

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;

my $device = $udb->resultset('Devices')->find($name);
die "No record for device $name.\n" if not $device;

if ($device->protected) {
  printf("The device %s is protected!\n", $device->name);
  print "Do not modify or delete this entry unless you know what you're doing.\n";
  if (! $uc->confirm("Are you sure (y/n)?")) {
    exit(1);
  }
}

my $rs;
eval {
  $rs = $udb->txn_do(sub {
			my $room = $uc->get_room($device->place ? $device->place->room : '');

      my $new_place = $udb->resultset('Places')->find_or_create({
          city => 'Providence',
          building => 'CIT',
          room => $room,
        });
      $device->place($new_place);
      $device->update;

			my $iface = $device->net_interfaces->single;
			my $port = $uc->get_port($iface);

      my $ifaces_rs = $device->net_interfaces;
      while (my $iface = $ifaces_rs->next) {
        $iface->net_port($port);
        $iface->update;
      }
    });
};
if ($@) {
  die <<EOF;
Operation failed. Details:
  $@
EOF
}

__END__

=head1 NAME

udb-move - Perform maintenance on an existing device record in UDB

=head1 SYNOPSIS

udb-move <device>

=head1 DESCRIPTION

Perform maintenance on an existing device record in UDB.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

