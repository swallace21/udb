#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);
use BrownCS::udb::DeviceHash;

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;
my $yes = 0;

GetOptions (
  'help|h|?' => \$help, 
  'v|verbose' => \$verbose,
  'y|yes' => \$yes,
) or usage(1);
usage(0) if $help;

my $build = (not $dryrun);

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);
my $udh = new BrownCS::udb::DeviceHash(udb => $udb);

if (!BrownCS::udb::Util::okay_tstaff || !BrownCS::udb::Util::okay_adminhost) {
  print "Insufficient privileges - check your warnings.\n";
  exit;
}

my $port = $uc->get_port();

exit(0)

__END__

=head1 NAME

udb-add-port - Add a new port mapping

=head1 SYNOPSIS

udb-add-port

=head1 DESCRIPTION

Add a new port mapping to the UDB database.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=item B<-v>, B<--verbose>

Print lots of text about what is going on.

=item B<-y>, B<--yes>

Don't prompt for a confirmation.

=back

=head1 AUTHORS

Mark Dieterich.

=head1 SEE ALSO

B<udb>

=cut

