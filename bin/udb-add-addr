#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console qw(:all);
use BrownCS::udb::Net qw(:all);

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;

GetOptions (
  'help|h|?' => \$help, 
) or usage(1);
usage(0) if $help;

if (@ARGV < 0 || @ARGV > 1) {
  usage(2);
}

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);

if (@ARGV != 1) {
  usage(2);
}

my $name = shift @ARGV;
my $device = $udb->resultset('Devices')->find($name);

if (! $device) {
    die "No record for device named \"$name\".\n";
}

my $rs;
eval {
  $rs = $udb->txn_do(sub {
    my $iface = $uc->choose_interface($device->device_name);
    if ($iface) {
      add_addr($udb, \$iface);
    }
  });
};
if ($@) {
  die <<EOF;
Operation failed. Details:
  $@
EOF
}

__END__

=head1 NAME

udb-add-ip - Associates a new IP address with an existing devices's network interface

=head1 SYNOPSIS

udb-add-ip <device>

=head1 DESCRIPTION

udb-add-ip 

Allows you to add an IP address to a device's existing network interface.  If the device
has multiple network interfaces, you will be prompted to choose one to associate the
new IP address with.  If you add an IP address to an existing interface, which already
has an assigned IP address and the VLAN of these two addresses differ, then you will 
be alerted that this will create a trunked port and confirm whether or not you wish
to continue.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=back

=head1 AUTHORS

Mark Dieterich.

=head1 SEE ALSO

B<udb>

=cut

