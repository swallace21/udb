#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long qw(:config pass_through);
use Pod::Usage;

use FindBin qw($RealBin);

my %udb_commands = (
  'get-next-uid' => {
    'desc' => "get the next free uid",
    'common' => 0,
  },
  'get-next-gid' => {
    'desc' => "get the next free gid",
    'common' => 0,
  },
  'add' => {
    'desc' => "add a new device",
    'common' => 1,
  },
  'mkvm' => {
    'desc' => "add a new xen vm",
    'common' => 0,
  },
  'build' => {
    'desc' => "build server configuration based on the database",
    'common' => 1,
  },
  'add-to-class' => {
    'desc' => "add one or more computers to a class",
    'common' => 0,
  },
  'del-from-class' => {
    'desc' => "remove one or more computers from a class",
    'common' => 0,
  },
  'classes' => {
    'desc' => "list the classes to which the computers belongs",
    'common' => 0,
  },
  'show-class' => {
    'desc' => "list the members of a class",
    'common' => 0,
  },
  'contact-list' => {
    'desc' => "print out a contact list for all devices in a class",
    'common' => 0,
  },
  'delete' => {
    'desc' => "delete a device",
    'common' => 0,
  },
  'edit' => {
    'desc' => "modify a device record in a text editor",
    'common' => 0,
  },
  'show' => {
    'desc' => "print a summary of a device",
    'common' => 1,
  },
  'index' => {
    'desc' => "interface like the old index db",
    'common' => 1,
  },
  'rename' => {
    'desc' => "rename a device",
    'common' => 1,
  },
  'move' => {
    'desc' => "move a device to a new location",
    'common' => 1,
  },
  'enable' => {
    'desc' => "enable (deploy a device)",
    'common' => 1,
  },
  'disable' => {
    'desc' => "disable (make a device spare)",
    'common' => 1,
  },
  'make-surplus' => {
    'desc' => "surplus a device",
    'common' => 1,
  },
  'show-surplus' => {
    'desc' => "print a summary of a surplus device",
    'common' => 1,
  },
  'change-os' => {
    'desc' => "change a computer's software configuration",
    'common' => 1,
  },
  'change-ip' => {
    'desc' => "change a networked device's IP or VLAN",
    'common' => 1,
  },
  'change-mac' => {
    'desc' => "change a networked device's MAC address",
    'common' => 1,
  },
  'change-user' => {
    'desc' => "change a device's primary user",
    'common' => 1,
  },
);

# Print a simple help message.
sub usage {
  my ($exit_status, $long) = @_;
  pod2usage({ -exitval => "NOEXIT", -verbose => 1});
  print "Commands:\n\n";
  foreach my $k (sort(keys(%udb_commands))) {
    if (not $long) {
      next if not $udb_commands{$k}{'common'};
    }
    printf("    %-18s%s\n", $k, $udb_commands{$k}{'desc'});
  }
  print "\nSee 'udb help COMMAND' for more information on a specific command.\n";
  exit($exit_status);
}

my $help = 0;
my $debug = 0;

GetOptions (
  'help|h|?' => \$help,
  'debug' => \$debug,
) or usage(1, 0);

my $cmd = shift;

if (not defined $cmd) {
  usage(2, 0);
}

if (($cmd eq 'help') or $help) {
  if (@ARGV or $help) {
    if ($cmd eq 'help') {
      $cmd = shift;
    }
    unshift(@ARGV, '-h');
  } else {
    usage(0, 1);
  }
}

if ($cmd eq 'change') {
  my $cmd2 = shift;
  $cmd = "$cmd-$cmd2";
}

if (not defined($udb_commands{$cmd})) {
  usage(2);
}

exec("$RealBin/udb-$cmd", @ARGV);

__END__

=head1 NAME

udb - main interface to the Universal DataBase

=head1 SYNOPSIS

udb <command> [<arg> ...]

=head1 DESCRIPTION

Wrapper script for running other udb commands.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=back

=head1 AUTHORS

Aleks Bromfield.

=cut

