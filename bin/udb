#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;

use FindBin qw($RealBin);

my %udb_commands = (
  'add' => {
    'desc' => ["\t\tadd a new host"],
    'usage' => "add",
    'common' => 1,
  },
  'class-add' => {
    'desc' => ["\tadd one or more hosts to a class"],
    'usage' => "class-add CLASS HOST...",
    'common' => 0,
  },
  'class-del' => {
    'desc' => ["\tremove one or more hosts from a class"],
    'usage' => "class-del CLASS HOST...",
    'common' => 0,
  },
  'classes' => {
    'desc' => ["\tlist the classes to which the host belongs"],
    'usage' => "classes HOST",
    'common' => 0,
  },
  'class-show' => {
    'desc' => ["\tlist the members of a class"],
    'usage' => "class-show CLASS",
    'common' => 0,
  },
  'contact-list' => {
    'desc' => ["print out a contact list for all hosts in a class"],
    'usage' => "contact-list CLASS",
    'common' => 0,
  },
  'delete' => {
    'desc' => ["\tdelete a host"],
    'usage' => "delete HOST",
    'common' => 1,
  },
  'modify' => {
    'desc' => ["\tmodify a host"],
    'usage' => "modify HOST",
    'common' => 1,
  },
  'show' => {
    'desc' => ["\tprint a summary of a host"],
    'usage' => "show HOST",
    'common' => 1,
  },
);

# Print a simple help message.
sub usage {
  my ($exit_status, $long) = @_;
  pod2usage({ -exitval => "NOEXIT", -verbose => 1});
  print "Commands:\n\n";
  foreach my $k (sort(keys(%udb_commands))) {
    if (not $long) {
      next if not $udb_commands{$k}{'common'};
    }
    print "    $k\t" . $udb_commands{$k}{'desc'}[0] . "\n";
  }
  print "\nSee 'udb help COMMAND' for more information on a specific command.\n";
  exit($exit_status);
}

# Print a simple help message for a specific command.
sub command_help {
  my ($cmd) = @_;
  print "Usage: udb ";
  print $udb_commands{$cmd}{"usage"} , "\n\n";
  my $lines = $udb_commands{$cmd}{"desc"};
  foreach my $line (@$lines) {
    $line =~ s/^\s+//;
    print "  \u$line.\n";
  }
  print "\n";
}

my $help = 0;
my $verbose = 0;
my $dryrun = 0;
my $username = $ENV{'USER'};

GetOptions ('help|h|?' => \$help, 
            'v|verbose' => \$verbose,
            'n|dryrun' => \$dryrun,
            'u|username=s' => \$username) or usage(1, 0);
usage(0, 0) if $help;

my $cmd = shift;

if (not defined $cmd) {
  usage(2, 0);
}

if ($cmd eq 'help') {
  if (@ARGV) {
    my $help_cmd = shift;
    command_help($help_cmd);
    exit(0);
  } else {
    usage(0, 1);
  }
}

if (not defined($udb_commands{$cmd})) {
  usage(2);
}

exec("$RealBin/udb-$cmd", @ARGV);

__END__

=head1 NAME

udb - main interface to the Universal DataBase

=head1 SYNOPSIS

udb [-v] [-n] [-u username] <command> [<arg> ...]

=head1 DESCRIPTION

Wrapper script for running other udb commands.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-u>, B<--username>=user

Logs onto the database server as the specified username, instead of as
the current user.

=item B<-v>, B<--verbose>

Print lots of information about what udb is doing.

=item B<-n>, B<--dryrun>

Don't make any changes; just print what would be done.

=back

=head1 AUTHORS

Aleks Bromfield.

=cut

