#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Term::ReadKey;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Util qw(:all);
use BrownCS::udb::Console;
use BrownCS::udb::DeviceHash;

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;

GetOptions (
  'help|h|?' => \$help, 
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $uc = new BrownCS::udb::Console(udb => $udb);
my $udh = new BrownCS::udb::DeviceHash(udb => $udb);

if ((@ARGV < 0) or (@ARGV > 1)) {
  usage(2);
}

my $arg_name = shift @ARGV;

if ($arg_name) {
  search_screen($arg_name);
} else {
  &menu_screen;
}

sub press_any_key {
  print "Press any key to continue... ";
  my $cmd = $uc->get_key;
  return;
}

sub search_screen {
  my ($name) = @_;
  my $devices = get_devices($name);
  if ($devices->count == 0) {
    warn "Couldn't find anything matching $name.\n";
    &press_any_key;
    return 1;
  }
  
  my $device_pager = $devices->pager;
  while (my $device = $devices->page($device_pager->current_page)->single) {
    system("clear");
    my ($wchar, $hchar, $wpixels, $hpixels) = GetTerminalSize();
  
    my $out = $uc->sprint_record('', $udh->format_device($device));
    my @newlines = ($out =~ m/\n/g);
    my $newlines = $hchar - $#newlines - 7;
    print $out;
    while ($newlines > 0) {
      print "\n";
      $newlines--;
    }
    print <<EOF;
  
            <RET> = next entry                   "d" = delete this entry
            "-" = previous entry                 "e" = edit this entry
            "q" = quit/back
  
EOF
  
    print "Command: ";
    my $cmd = $uc->get_key;
    my $name = $device->device_name;
    for ($cmd) {
      if (/^\n$/) {
        $device_pager->current_page($device_pager->next_page or $device_pager->last_page);
      } elsif (/^-$/) {
        $device_pager->current_page($device_pager->previous_page);
      } elsif (/^q$/) {
        return;
      } elsif (/^d$/) {
        my $answer = $uc->confirm("Are you sure? ",0);
        if ($answer) {
          system("udb delete $name");
          &press_any_key;
        }
      } elsif (/^e$/) {
        system("udb edit $name");
        &press_any_key;
      }
    }
  }
}

sub menu_screen {
  my $count = $udb->resultset('Devices')->count;
  for (;;) {
    system("clear");
    print <<"EOF";
Database: udb  ($count entries)


        a - Add new entry to database
        f - Find entry in database
        r - Read database entry by entry
        q - Save and exit

EOF
    print "Command: ";
    my $cmd = $uc->get_key;
    for ($cmd) {
      if (/^a$/) {
        my $new_name = $uc->ask("Name:",'');
        if ($new_name) {
          system("udb add $new_name");
          &press_any_key;
        }
      } elsif (/^f$/) {
        my $search_pattern = $uc->ask("Name to search for:",'');
        if ($search_pattern) {
          search_screen($search_pattern);
        }
      } elsif (/^r$/) {
        search_screen('');
      } elsif (/^q$/) {
        return;
      }
    }
  }
}

sub get_devices {
  my ($name) = @_;

  my $query;

  if (not $name) {
    $query = undef;
  } else {
    $query = {
      device_name => {'~*' => $name},
    };
  }

  return $udb->resultset('Devices')->search($query, {
      page => 1,
      rows => 1,
      order_by => 'device_name',
    });
}

__END__

=head1 NAME

udb-index - Print out information about a device

=head1 SYNOPSIS

udb-index <device>

=head1 DESCRIPTION

udb-index is designed to resemble the old I<index pc> command. Like the old
command, it supports searches, edits, additions, and deletions.

=head1 OPTIONS

=over

=item B<-h>, B<--help>

Print a help message and exit.

=back

=head1 AUTHORS

Aleks Bromfield.

=head1 SEE ALSO

B<udb>

=cut

