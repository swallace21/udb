#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use Switch;

use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use BrownCS::udb::Schema;
use BrownCS::udb::Console qw(:all);
use BrownCS::udb::Search qw(:all);
use BrownCS::udb::DeviceHash;

# Print a simple help message.
sub usage {
  my ($exit_status) = @_;
  pod2usage({ -exitval => $exit_status, -verbose => 1});
}

my $help = 0;
my $batch = 0;
my $surplus = 0;
my $verbose = 0;

GetOptions (
  'help|h' => \$help, 
  'batch|b' => \$batch,
  'surplus|s' => \$surplus,
  'verbose|v' => \$verbose,
) or usage(1);
usage(0) if $help;

my $udb = BrownCS::udb::Schema->connect;
my $udh = new BrownCS::udb::DeviceHash(udb => $udb);

if (@ARGV < 1 || @ARGV > 2) {
  usage(2);
}

my $type = shift;

my $string;
if (@ARGV == 1) {
  $string = shift;
}

my $success = 0;
my @results;

switch($type) {

  case "brownid" {
    if (! $string) {
      print "ERROR: you must enter a brownid string to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_brown_id($udb)->($string,$surplus,$verbose);
  } 
  case "class" {
    if (! $string) {
      print "ERROR: you must enter a class string to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_class($udb)->($string,$verbose);
  } 
  case "comment" {
    if (! $string) {
      print "ERROR: you must enter a comment string to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_comment($udb)->($string,$surplus,$verbose);
  }
  case "contact" {
    if (! $string) {
      print "ERROR: you must enter contact string to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_contact($udb)->($string,$verbose);
  }
  case "device" {
    if (! $string) {
      print "ERROR: you must enter device string to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_device($udb)->($string,$surplus,$verbose);
  }
  case "dns" {
    if (! $string) {
      print "ERROR: you must enter a dns name to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_dns($udb)->($string,$verbose);
  }
  case "ethernet" {
    if (! $string) {
      print "ERROR: you must enter an ethernet address to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_ethernet($udb)->($string,$verbose);
  }
  case "os_type" {
    if (! $string) {
      print "ERROR: you must enter an os_type to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_os_type($udb)->($string,$verbose);
  }
  case "po" {
    if (! $string) {
      print "ERROR: you must enter po number to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_po($udb)->($string,$surplus,$verbose);
  }
  case "room" {
    if (! $string) {
      print "ERROR: you must enter room number to search for\n";
      usage(2)
    }
    ($success, @results) = search_room($udb)->($string,$verbose);
  }
  case "serial" {
    if (! $string) {
      print "ERROR: you must enter serial number to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_serial($udb)->($string,$surplus,$verbose);
  }
  case "spare" {
    ($success, @results) = search_spare($udb)->($string,$verbose);
  }
  case "ssh_known_hosts" {
    if (@ARGV) {
      print "ERROR: no search string is required\n\n";
      usage(2)
    }
    ($success, @results) = search_ssh_known_hosts($udb)->(1);
    # this only makes sense to return a list of hosts, i.e. batch mode
    $batch=1; 
  }
  case "usage" {
    if (! $string) {
      print "ERROR: you must enter a usage to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_usage($udb)->($string,$verbose);
  }
  case "walljack" {
    if (! $string) {
      print "ERROR: you must enter walljack to search for\n\n";
      usage(2)
    }
    ($success, @results) = search_walljack($udb)->($string,$verbose);

    # this only makes sense return the raw output
    $batch=1; 
  }
  else {
    print "Unknown search type\n";
    usage(2);
  }
}

if ($success) {
  if ($batch) {
  	# In batch, just print the records
  	print "$_\n" for @results;
  } else {
  	# Init and print a header
  	my $uc = new BrownCS::udb::Console(udb => $udb);
  	print "Found the following matching devices:\n\n";
  	# Print each record
  	foreach my $result (@results) {
	    my ($name, $junk) = split(/ /, $result);

	    # display any results for non-surplused machines
	    my $device = $udb->resultset('Devices')->find($name);
	    if ($device) {
	      $uc->print_record('', $udh->format_device($device));
	    }
      print "\n";

      if ($surplus) {
	      # dispaly surplused machine results
	      my $device_rs = $udb->resultset('SurplusDevices')->search({
	        device_name => $name
	      });
	      if ($device_rs) {
	        while ($device = $device_rs->next) {
		        $uc->print_record('', $udh->format_device($device));
          }
        }
	      print "\n";
      }
	  }
  }

  # Success: exit 0
  exit 0;

} else {

  # Failure: print error if an actual user, and exit 1
  if (!$batch) {
   print "No matching results found\n";
  }

  exit 1;
}

__END__

=head1 NAME

udb-query - Query for a variety of data in udb.

=head1 SYNOPSIS

udb-query [-bhsv] <type of search> [search string]

where <type of search> can be one of:

  brownid         - search for a given Brown ID number
  class           - search for devices in a given class
  comment         - search for a given comment
  contact         - search for a device whose contact is a given user
  device          - search for a given device name
  dns             - search for a given dns name
  ethernet        - search for a given ethernet address
  os_type         - search for a given os_type
  po              - search for a given po number
  room            - search for devices within a given room
  serial          - search for a given serial number
  spare           - search for spare systems
  ssh_known_hosts - search for machines that should be included in 
                    ssh_known_hosts file
  walljack        - search for devices connected to a given walljack

=head1 DESCRIPTION

udb-query provides a pre-defined number of queries a user can perform on the udb data.  It is intended to provide an easy way to search for the most common information tstaff members need to retrieve.

=head1 OPTIONS

=over

=item B<-b>, B<--batch>

Run in batch mode and only print out device entries matching query

=item B<-h>, B<--help>

Print a help message and exit.

=item B<-s>, B<--surplus>

Include surplused machines in results

=item B<-v>, B<--verbose>

Verbose output

=back

=head1 AUTHORS

Aleks Bromfield, Paul McCann, Mark Dieterich.

=head1 SEE ALSO

B<udb>

=cut

